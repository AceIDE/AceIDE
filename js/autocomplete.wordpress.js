
var autocomplete_wordpress = jQuery.parseJSON( '{"add_metadata":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int $object_id ID of the object metadata is for, string $meta_key Metadata key, string $meta_value Metadata value, bool $unique Optional, default is false. Whether the specified metadata key should be unique for the object. If true, and the object already has a value for the specified metadata key, no change will be made, ","desc":"Add metadata for the specified object."},"update_metadata":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int $object_id ID of the object metadata is for, string $meta_key Metadata key, string $meta_value Metadata value, string $prev_value Optional. If specified, only update existing metadata entries with the specified value. Otherwise, update all entries., ","desc":"Update metadata for the specified object.  If no value already exists for the specified object ID and metadata key, the metadata will be added."},"delete_metadata":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int $object_id ID of the object metadata is for, string $meta_key Metadata key, string $meta_value Optional. Metadata value. If specified, only delete metadata entries with this value. Otherwise, delete all entries with the specified meta_key., bool $delete_all Optional, default is false. If true, delete matching metadata entries for all objects, ignoring the specified object_id. Otherwise, only delete matching metadata entries for the specified object_id., ","desc":"Delete metadata for the specified object."},"get_metadata":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int $object_id ID of the object metadata is for, string $meta_key Optional. Metadata key. If not specified, retrieve all metadata for the specified object., bool $single Optional, default is false. If true, return only the first value of the specified meta_key. This parameter has no effect if meta_key is not specified., ","desc":"Retrieve metadata for the specified object."},"metadata_exists":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int $object_id ID of the object metadata is for, string $meta_key Metadata key., ","desc":"Determine if a meta key is set for a given object"},"get_metadata_by_mid":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int $meta_id ID for a specific meta row, ","desc":"Get meta data by meta ID"},"update_metadata_by_mid":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int $meta_id ID for a specific meta row, string $meta_value Metadata value, string $meta_key Optional, you can provide a meta key to update it, ","desc":"Update meta data by meta ID"},"delete_metadata_by_mid":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int $meta_id ID for a specific meta row, ","desc":"Delete meta data by meta ID"},"update_meta_cache":{"params":"string $meta_type Type of object metadata is for (e.g., comment, post, or user), int|array $object_ids array or comma delimited list of object IDs to update cache for, ","desc":"Update the metadata cache for the specified objects."},"get_meta_sql":{"params":"array $meta_query A meta query, string $type Type of meta, string $primary_table , string $primary_id_column , object $context (optional) The main query object, ","desc":"Given a meta query, generates SQL clauses to be appended to a main query"},"_get_meta_table":{"params":"string $type Type of object to get metadata table for (e.g., comment, post, or user), ","desc":"Retrieve the name of the metadata table for the specified object type."},"is_protected_meta":{"params":"string $meta_key Meta key, ","desc":"Determine whether a meta key is protected"},"sanitize_meta":{"params":"string $meta_key Meta key, mixed $meta_value Meta value to sanitize, string $meta_type Type of meta, ","desc":"Sanitize meta value"},"register_meta":{"params":"string $meta_type Type of meta, string $meta_key Meta key, string|array $sanitize_callback A function or method to call when sanitizing the value of $meta_key., string|array $auth_callback Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks., array $args Arguments, ","desc":"Register meta key"},"add_rewrite_rule":{"params":"string $regex Regular Expression to match request against., string $redirect Page to redirect to., string $after Optional, default is &#039;bottom&#039;. Where to add rule, can also be &#039;top&#039;., ","desc":"Add a straight rewrite rule."},"add_rewrite_tag":{"params":"string $tagname , string $regex , ","desc":"Add a new tag (like %postname%)."},"add_permastruct":{"params":"string $name Name for permalink structure., string $struct Permalink structure., bool $with_front Prepend front base to permalink structure., ","desc":"Add permalink structure."},"add_feed":{"params":"string $feedname , callback $function Callback to run on feed display., ","desc":"Add a new feed type like /atom1/."},"flush_rewrite_rules":{"params":"bool $hard Whether to update .htaccess (hard flush) or just update rewrite_rules transient (soft flush). Default is true (hard)., ","desc":"Remove rewrite rules and then recreate rewrite rules."},"add_rewrite_endpoint":{"params":"unknown_type $name , unknown_type $places , ","desc":"Add an endpoint, like /trackback/."},"_wp_filter_taxonomy_base":{"params":"string $base The taxonomy base that we&#039;re going to filter, ","desc":"Filter the URL base for taxonomies."},"url_to_postid":{"params":"string $url Permalink to check., ","desc":"Examine a url and try to determine the post ID it represents."},"fetch_rss":{"params":"string $url URL to retrieve feed, ","desc":"Build Magpie object based on RSS from URL."},"_fetch_remote_file":{"params":"string $url URL to retrieve, array $headers Optional. Headers to send to the URL., ","desc":"Retrieve URL headers and content using WP HTTP Request API."},"_response_to_rss":{"params":"unknown_type $resp , ","desc":"Retrieve"},"init":{"params":"","desc":"Set up constants with default values, unless user overrides."},"is_info":{"params":"","desc":""},"is_success":{"params":"","desc":""},"is_redirect":{"params":"","desc":""},"is_error":{"params":"","desc":""},"is_client_error":{"params":"","desc":""},"is_server_error":{"params":"","desc":""},"parse_w3cdtf":{"params":"","desc":""},"wp_rss":{"params":"string $url URL of feed to display. Will not auto sense feed URL., int $num_items Optional. Number of items to display, default is all., ","desc":"Display all RSS items in a HTML ordered list."},"get_rss":{"params":"string $url URL of feed to display. Will not auto sense feed URL., int $num_items Optional. Number of items to display, default is all., ","desc":"Display RSS items in HTML list items."},"get_bloginfo_rss":{"params":"string $show See get_bloginfo() for possible values., ","desc":"RSS container for the bloginfo function."},"bloginfo_rss":{"params":"string $show See get_bloginfo() for possible values., ","desc":"Display RSS container for the bloginfo function."},"get_default_feed":{"params":"","desc":"Retrieve the default feed."},"get_wp_title_rss":{"params":"string $sep Optional.How to separate the title. See wp_title() for more info., ","desc":"Retrieve the blog title for the feed title."},"wp_title_rss":{"params":"string $sep Optional., ","desc":"Display the blog title for display of the feed title."},"get_the_title_rss":{"params":"","desc":"Retrieve the current post title for the feed."},"the_title_rss":{"params":"","desc":"Display the post title in the feed."},"get_the_content_feed":{"params":"string $feed_type The type of feed. rss2 | atom | rss | rdf, ","desc":"Retrieve the post content for feeds."},"the_content_feed":{"params":"string $feed_type The type of feed. rss2 | atom | rss | rdf, ","desc":"Display the post content for feeds."},"the_excerpt_rss":{"params":"","desc":"Display the post excerpt for the feed."},"the_permalink_rss":{"params":"","desc":"Display the permalink to the post for use in feeds."},"comments_link_feed":{"params":"","desc":"Outputs the link to the comments for the current post in an xml safe way"},"comment_guid":{"params":"int|object $comment_id Optional comment object or id. Defaults to global comment object., ","desc":"Display the feed GUID for the current comment."},"get_comment_guid":{"params":"int|object $comment_id Optional comment object or id. Defaults to global comment object., ","desc":"Retrieve the feed GUID for the current comment."},"comment_link":{"params":"","desc":"Display the link to the comments."},"get_comment_author_rss":{"params":"","desc":"Retrieve the current comment author for use in the feeds."},"comment_author_rss":{"params":"","desc":"Display the current comment author in the feed."},"comment_text_rss":{"params":"","desc":"Display the current comment content for use in the feeds."},"get_the_category_rss":{"params":"string $type Optional, default is the type returned by get_default_feed()., ","desc":"Retrieve all of the post categories, formatted for use in feeds."},"the_category_rss":{"params":"string $type Optional, default is the type returned by get_default_feed()., ","desc":"Display the post categories in the feed."},"html_type_rss":{"params":"","desc":"Display the HTML type based on the blog setting."},"rss_enclosure":{"params":"","desc":"Display the rss enclosure for the current post."},"atom_enclosure":{"params":"","desc":"Display the atom enclosure for the current post."},"prep_atom_text_construct":{"params":"string $data Input string, ","desc":"Determine the type of a string of data with the data formatted."},"self_link":{"params":"","desc":"Display the link for the currently displayed feed in a XSS safe way."},"feed_content_type":{"params":"","desc":"Return the content type for specified feed type."},"fetch_feed":{"params":"string $url URL to retrieve feed, ","desc":"Build SimplePie object based on RSS or Atom feed from URL."},"is_rtl":{"params":"","desc":"Checks if current locale is RTL."},"is_subdomain_install":{"params":"","desc":"Whether a subdomain configuration is enabled."},"wp_get_active_network_plugins":{"params":"","desc":"Returns array of network plugin files to be included in global scope."},"ms_site_check":{"params":"","desc":"Checks status of current blog."},"get_current_site_name":{"params":"","desc":"Sets current site name."},"wpmu_current_site":{"params":"","desc":"Sets current_site object."},"ms_not_installed":{"params":"","desc":"Displays a failure message."},"_walk_bookmarks":{"params":"array $bookmarks List of bookmarks to traverse, string|array $args Optional. Overwrite the defaults., ","desc":"The formatted output of a list of bookmarks."},"wp_list_bookmarks":{"params":"string|array $args Optional. Overwrite the defaults of the function, ","desc":"Retrieve or echo all of the bookmarks."},"check_comment":{"params":"string $author Comment Author&#039;s name, string $email Comment Author&#039;s email, string $url Comment Author&#039;s URL, string $comment Comment contents, string $user_ip Comment Author&#039;s IP address, string $user_agent Comment Author&#039;s User Agent, string $comment_type Comment type, either user submitted comment, trackback, or pingback, ","desc":"Checks whether a comment passes internal checks to be allowed to add."},"get_approved_comments":{"params":"int $post_id The ID of the post, ","desc":"Retrieve the approved comments for post $post_id."},"get_comment":{"params":"object|string|int $comment Comment to retrieve., string $output Optional. OBJECT or ARRAY_A or ARRAY_N constants., ","desc":"Retrieves comment data given a comment ID or comment object."},"get_comments":{"params":"mixed $args Optional. Array or string of options to override defaults., ","desc":"Retrieve a list of comments."},"get_comment_statuses":{"params":"","desc":"Retrieve all of the WordPress supported comment statuses."},"get_lastcommentmodified":{"params":"string $timezone Which timezone to use in reference to &#039;gmt&#039;, &#039;blog&#039;, or &#039;server&#039; locations., ","desc":"The date the last comment was modified."},"get_comment_count":{"params":"int $post_id Optional. Comment amount in post if &gt; 0, else total comments blog wide., ","desc":"The amount of comments in a post or total comments."},"add_comment_meta":{"params":"int $comment_id Comment ID., string $meta_key Metadata name., mixed $meta_value Metadata value., bool $unique Optional, default is false. Whether the same key should not be added., ","desc":"Add meta data field to a comment."},"delete_comment_meta":{"params":"int $comment_id comment ID, string $meta_key Metadata name., mixed $meta_value Optional. Metadata value., ","desc":"Remove metadata matching criteria from a comment."},"get_comment_meta":{"params":"int $comment_id Comment ID., string $key The meta key to retrieve., bool $single Whether to return a single value., ","desc":"Retrieve comment meta field for a comment."},"update_comment_meta":{"params":"int $comment_id Comment ID., string $meta_key Metadata key., mixed $meta_value Metadata value., mixed $prev_value Optional. Previous value to check before removing., ","desc":"Update comment meta field based on comment ID."},"sanitize_comment_cookies":{"params":"","desc":"Sanitizes the cookies sent to the user already."},"wp_allow_comment":{"params":"array $commentdata Contains information on the comment, ","desc":"Validates whether this comment is allowed to be made."},"check_comment_flood_db":{"params":"string $ip Comment IP., string $email Comment author email address., string $date MySQL time string., ","desc":"Check whether comment flooding is occurring."},"separate_comments":{"params":"array $comments Array of comments, ","desc":"Separates an array of comments into an array keyed by comment_type."},"get_comment_pages_count":{"params":"array $comments Optional array of comment objects. Defaults to $wp_query-&gt;comments, int $per_page Optional comments per page., boolean $threaded Optional control over flat or threaded comments., ","desc":"Calculate the total number of comment pages."},"get_page_of_comment":{"params":"int $comment_ID Comment ID., array $args Optional args., ","desc":"Calculate what page number a comment will appear on for comment paging."},"wp_blacklist_check":{"params":"string $author The author of the comment, string $email The email of the comment, string $url The url used in the comment, string $comment The comment content, string $user_ip The comment author IP address, string $user_agent The author&#039;s browser user agent, ","desc":"Does comment contain blacklisted characters or words."},"wp_count_comments":{"params":"int $post_id Optional. Post ID., ","desc":"Retrieve total comments for blog or single post."},"wp_delete_comment":{"params":"int $comment_id Comment ID, bool $force_delete Whether to bypass trash and force deletion. Default is false., ","desc":"Trashes or deletes a comment."},"wp_trash_comment":{"params":"int $comment_id Comment ID., ","desc":"Moves a comment to the Trash"},"wp_untrash_comment":{"params":"int $comment_id Comment ID., ","desc":"Removes a comment from the Trash"},"wp_spam_comment":{"params":"int $comment_id Comment ID., ","desc":"Marks a comment as Spam"},"wp_unspam_comment":{"params":"int $comment_id Comment ID., ","desc":"Removes a comment from the Spam"},"wp_get_comment_status":{"params":"int $comment_id Comment ID, ","desc":"The status of a comment by ID."},"wp_transition_comment_status":{"params":"string $new_status New comment status., string $old_status Previous comment status., object $comment Comment data., ","desc":"Call hooks for when a comment status transition occurs."},"wp_get_current_commenter":{"params":"","desc":"Get current commenter&#039;s name, email, and URL."},"wp_insert_comment":{"params":"array $commentdata Contains information on the comment., ","desc":"Inserts a comment to the database."},"wp_filter_comment":{"params":"array $commentdata Contains information on the comment., ","desc":"Filters and sanitizes comment data."},"wp_throttle_comment_flood":{"params":"bool $block Whether plugin has already blocked comment., int $time_lastcomment Timestamp for last comment., int $time_newcomment Timestamp for new comment., ","desc":"Whether comment should be blocked because of comment flood."},"wp_new_comment":{"params":"array $commentdata Contains information on the comment., ","desc":"Adds a new comment to the database."},"wp_set_comment_status":{"params":"int $comment_id Comment ID., string $comment_status New comment status, either &#039;hold&#039;, &#039;approve&#039;, &#039;spam&#039;, or &#039;delete&#039;., bool $wp_error Whether to return a WP_Error object if there is a failure. Default is false., ","desc":"Sets the status of a comment."},"wp_update_comment":{"params":"array $commentarr Contains information on the comment., ","desc":"Updates an existing comment in the database."},"wp_defer_comment_counting":{"params":"bool $defer , ","desc":"Whether to defer comment counting."},"wp_update_comment_count":{"params":"int $post_id Post ID, bool $do_deferred Whether to process previously deferred post comment counts, ","desc":"Updates the comment count for post(s)."},"wp_update_comment_count_now":{"params":"int $post_id Post ID, ","desc":"Updates the comment count for the post."},"discover_pingback_server_uri":{"params":"string $url URL to ping., int $deprecated Not Used., ","desc":"Finds a pingback server URI based on the given URL."},"do_all_pings":{"params":"","desc":"Perform all pingbacks, enclosures, trackbacks, and send to pingback services."},"do_trackbacks":{"params":"int $post_id Post ID to do trackbacks on., ","desc":"Perform trackbacks."},"generic_ping":{"params":"int $post_id Post ID. Not actually used., ","desc":"Sends pings to all of the ping site services."},"pingback":{"params":"string $content Post content to check for links., int $post_ID Post ID., ","desc":"Pings back the links found in a post."},"privacy_ping_filter":{"params":"mixed $sites Will return if blog is public, will not return if not public., ","desc":"Check whether blog is public before returning sites."},"trackback":{"params":"string $trackback_url URL to send trackbacks., string $title Title of post., string $excerpt Excerpt of post., int $ID Post ID., ","desc":"Send a Trackback."},"weblog_ping":{"params":"string $server Host of blog to connect to., string $path Path to send the ping., ","desc":"Send a pingback."},"clean_comment_cache":{"params":"int|array $ids Comment ID or array of comment IDs to remove from cache, ","desc":"Removes comment ID from the comment cache."},"update_comment_cache":{"params":"array $comments Array of comment row objects, ","desc":"Updates the comment cache of given comments."},"_close_comments_for_old_posts":{"params":"object $posts Post data object., object $query Query object., ","desc":"Close comments on old posts on the fly, without any extra DB queries.  Hooked to the_posts."},"_close_comments_for_old_post":{"params":"bool $open Comments open or closed, int $post_id Post ID, ","desc":"Close comments on an old post.  Hooked to comments_open and pings_open."},"get_query_var":{"params":"string $var The variable key to retrieve., ","desc":"Retrieve variable in the WP_Query class."},"get_queried_object":{"params":"","desc":"Retrieve the currently-queried object.  Wrapper for $wp_query-&gt;get_queried_object()"},"get_queried_object_id":{"params":"","desc":"Retrieve ID of the current queried object. Wrapper for $wp_query-&gt;get_queried_object_id()"},"set_query_var":{"params":"string $var Query variable key., mixed $value , ","desc":"Set query variable."},"query_posts":{"params":"string $query , ","desc":"Set up The Loop with query parameters."},"wp_reset_query":{"params":"","desc":"Destroy the previous query and set up a new query."},"wp_reset_postdata":{"params":"","desc":"After looping through a separate query, this function restores the $post global to the current post in the main query"},"is_archive":{"params":"","desc":"Is the query for an archive page?"},"is_post_type_archive":{"params":"mixed $post_types Optional. Post type or array of posts types to check against., ","desc":"Is the query for a post type archive page?"},"is_attachment":{"params":"","desc":"Is the query for an attachment page?"},"is_author":{"params":"mixed $author Optional. User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames, ","desc":"Is the query for an author archive page?"},"is_category":{"params":"mixed $category Optional. Category ID, name, slug, or array of Category IDs, names, and slugs., ","desc":"Is the query for a category archive page?"},"is_tag":{"params":"mixed $slug Optional. Tag slug or array of slugs., ","desc":"Is the query for a tag archive page?"},"is_tax":{"params":"mixed $taxonomy Optional. Taxonomy slug or slugs., mixed $term Optional. Term ID, name, slug or array of Term IDs, names, and slugs., ","desc":"Is the query for a taxonomy archive page?"},"is_comments_popup":{"params":"","desc":"Whether the current URL is within the comments popup window."},"is_date":{"params":"","desc":"Is the query for a date archive?"},"is_day":{"params":"","desc":"Is the query for a day archive?"},"is_feed":{"params":"string|array $feeds Optional feed types to check., ","desc":"Is the query for a feed?"},"is_comment_feed":{"params":"","desc":"Is the query for a comments feed?"},"is_front_page":{"params":"","desc":"Is the query for the front page of the site?"},"is_home":{"params":"","desc":"Is the query for the blog homepage?"},"is_month":{"params":"","desc":"Is the query for a month archive?"},"is_page":{"params":"mixed $page Page ID, title, slug, or array of such., ","desc":"Is the query for a single page?"},"is_paged":{"params":"","desc":"Is the query for paged result and not for the first page?"},"is_preview":{"params":"","desc":"Is the query for a post or page preview?"},"is_robots":{"params":"","desc":"Is the query for the robots file?"},"is_search":{"params":"","desc":"Is the query for a search?"},"is_single":{"params":"mixed $post Post ID, title, slug, or array of such., ","desc":"Is the query for a single post?"},"is_singular":{"params":"mixed $post_types Optional. Post Type or array of Post Types, ","desc":"Is the query for a single post of any post type (post, attachment, page, ... )?"},"is_time":{"params":"","desc":"Is the query for a specific time?"},"is_trackback":{"params":"","desc":"Is the query for a trackback endpoint call?"},"is_year":{"params":"","desc":"Is the query for a specific year?"},"is_404":{"params":"","desc":"Is the query a 404 (returns no results)?"},"is_main_query":{"params":"","desc":"Is the query the main query?"},"have_posts":{"params":"","desc":"Whether current WordPress query has results to loop over."},"in_the_loop":{"params":"","desc":"Whether the caller is in the Loop."},"rewind_posts":{"params":"","desc":"Rewind the loop posts."},"the_post":{"params":"","desc":"Iterate the post index in the loop."},"have_comments":{"params":"","desc":"Whether there are comments to loop over."},"the_comment":{"params":"","desc":"Iterate comment index in the comment loop."},"wp_old_slug_redirect":{"params":"","desc":"Redirect old slugs to the correct permalink."},"setup_postdata":{"params":"object $post Post data., ","desc":"Set up global post data."},"is_child_theme":{"params":"","desc":"Whether a child theme is in use."},"get_stylesheet":{"params":"","desc":"Retrieve name of the current stylesheet."},"get_stylesheet_directory":{"params":"","desc":"Retrieve stylesheet directory path for current theme."},"get_stylesheet_directory_uri":{"params":"","desc":"Retrieve stylesheet directory URI."},"get_stylesheet_uri":{"params":"","desc":"Retrieve URI of current theme stylesheet."},"get_locale_stylesheet_uri":{"params":"","desc":"Retrieve localized stylesheet URI."},"get_template":{"params":"","desc":"Retrieve name of the current theme."},"get_template_directory":{"params":"","desc":"Retrieve current theme directory."},"get_template_directory_uri":{"params":"","desc":"Retrieve theme directory URI."},"get_theme_data":{"params":"string $theme_file Theme file path., ","desc":"Retrieve theme data from parsed theme file."},"get_themes":{"params":"","desc":"Retrieve list of themes with theme data in theme directory."},"get_theme_roots":{"params":"","desc":"Retrieve theme roots."},"get_theme":{"params":"string $theme Theme name., ","desc":"Retrieve theme data."},"get_current_theme":{"params":"","desc":"Retrieve current theme display name."},"register_theme_directory":{"params":"string $directory Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR, ","desc":"Register a directory that contains themes."},"search_theme_directories":{"params":"","desc":"Search all registered theme directories for complete and valid themes."},"get_theme_root":{"params":"string $stylesheet_or_template The stylesheet or template name of the theme, ","desc":"Retrieve path to themes directory."},"get_theme_root_uri":{"params":"string $stylesheet_or_template The stylesheet or template name of the theme, ","desc":"Retrieve URI for themes directory."},"get_raw_theme_root":{"params":"string $stylesheet_or_template The stylesheet or template name of the theme, ","desc":"Get the raw theme root relative to the content directory with no filters applied."},"get_query_template":{"params":"string $type Filename without extension., array $templates An optional list of template candidates, ","desc":"Retrieve path to a template"},"get_index_template":{"params":"","desc":"Retrieve path of index template in current or parent template."},"get_404_template":{"params":"","desc":"Retrieve path of 404 template in current or parent template."},"get_archive_template":{"params":"","desc":"Retrieve path of archive template in current or parent template."},"get_author_template":{"params":"","desc":"Retrieve path of author template in current or parent template."},"get_category_template":{"params":"","desc":"Retrieve path of category template in current or parent template."},"get_tag_template":{"params":"","desc":"Retrieve path of tag template in current or parent template."},"get_taxonomy_template":{"params":"","desc":"Retrieve path of taxonomy template in current or parent template."},"get_date_template":{"params":"","desc":"Retrieve path of date template in current or parent template."},"get_home_template":{"params":"","desc":"Retrieve path of home template in current or parent template."},"get_front_page_template":{"params":"","desc":"Retrieve path of front-page template in current or parent template."},"get_page_template":{"params":"","desc":"Retrieve path of page template in current or parent template."},"get_paged_template":{"params":"","desc":"Retrieve path of paged template in current or parent template."},"get_search_template":{"params":"","desc":"Retrieve path of search template in current or parent template."},"get_single_template":{"params":"","desc":"Retrieve path of single template in current or parent template."},"get_attachment_template":{"params":"","desc":"Retrieve path of attachment template in current or parent template."},"get_comments_popup_template":{"params":"","desc":"Retrieve path of comment popup template in current or parent template."},"locate_template":{"params":"string|array $template_names Template file(s) to search for, in order., bool $load If true the template file will be loaded if it is found., bool $require_once Whether to require_once or require. Default true. Has no effect if $load is false., ","desc":"Retrieve the name of the highest priority template file that exists."},"load_template":{"params":"string $_template_file Path to template file., bool $require_once Whether to require_once or require. Default true., ","desc":"Require the template file with WordPress environment."},"locale_stylesheet":{"params":"","desc":"Display localized stylesheet link element."},"preview_theme":{"params":"","desc":"Start preview theme output buffer."},"_preview_theme_template_filter":{"params":"","desc":"Private function to modify the current template when previewing a theme"},"_preview_theme_stylesheet_filter":{"params":"","desc":"Private function to modify the current stylesheet when previewing a theme"},"preview_theme_ob_filter":{"params":"string $content , ","desc":"Callback function for ob_start() to capture all links in the theme."},"preview_theme_ob_filter_callback":{"params":"array $matches , ","desc":"Manipulates preview theme links in order to control and maintain location."},"switch_theme":{"params":"string $template Template name, string $stylesheet Stylesheet name., ","desc":"Switches current theme to new template and stylesheet names."},"validate_current_theme":{"params":"","desc":"Checks that current theme files &#039;index.php&#039; and &#039;style.css&#039; exists."},"get_theme_mods":{"params":"","desc":"Retrieve all theme modifications."},"get_theme_mod":{"params":"string $name Theme modification name., bool|string $default , ","desc":"Retrieve theme modification value for the current theme."},"set_theme_mod":{"params":"string $name Theme modification name., string $value theme modification value., ","desc":"Update theme modification value for the current theme."},"remove_theme_mod":{"params":"string $name Theme modification name., ","desc":"Remove theme modification name from current theme list."},"remove_theme_mods":{"params":"","desc":"Remove theme modifications option for current theme."},"get_header_textcolor":{"params":"","desc":"Retrieve text color for custom header."},"header_textcolor":{"params":"","desc":"Display text color for custom header."},"get_header_image":{"params":"","desc":"Retrieve header image for custom header."},"get_random_header_image":{"params":"","desc":"Get random header image from registered images in theme."},"is_random_header_image":{"params":"string $type The random pool to use. any|default|uploaded, ","desc":"Check if random header image is in use."},"header_image":{"params":"","desc":"Display header image path."},"get_uploaded_header_images":{"params":"","desc":"Get the header images uploaded for the current theme."},"add_custom_image_header":{"params":"callback $header_callback Call on &#039;wp_head&#039; action., callback $admin_header_callback Call on custom header administration screen., callback $admin_image_div_callback Output a custom header image div on the custom header administration screen. Optional., ","desc":"Add callbacks for image header display."},"remove_custom_image_header":{"params":"","desc":"Remove image header support."},"register_default_headers":{"params":"array $headers Array of headers keyed by a string id. The ids point to arrays containing &#039;url&#039;, &#039;thumbnail_url&#039;, and &#039;description&#039; keys., ","desc":"Register a selection of default headers to be displayed by the custom header admin UI."},"unregister_default_headers":{"params":"string|array $header The header string id (key of array) to remove, or an array thereof., ","desc":"Unregister default headers."},"get_background_image":{"params":"","desc":"Retrieve background image for custom background."},"background_image":{"params":"","desc":"Display background image path."},"get_background_color":{"params":"","desc":"Retrieve value for custom background color."},"background_color":{"params":"","desc":"Display background color value."},"add_custom_background":{"params":"callback $header_callback Call on &#039;wp_head&#039; action., callback $admin_header_callback Call on custom background administration screen., callback $admin_image_div_callback Output a custom background image div on the custom background administration screen. Optional., ","desc":"Add callbacks for background image display."},"remove_custom_background":{"params":"","desc":"Remove custom background support."},"_custom_background_cb":{"params":"","desc":"Default custom background callback."},"add_editor_style":{"params":"mixed $stylesheet Optional. Stylesheet name or array thereof, relative to theme root. Defaults to &#039;editor-style.css&#039;, ","desc":"Add callback for custom TinyMCE editor stylesheets."},"remove_editor_styles":{"params":"","desc":"Removes all visual editor stylesheets."},"add_theme_support":{"params":"string $feature the feature being added, ","desc":"Allows a theme to register its support of a certain feature"},"get_theme_support":{"params":"string $feature the feature to check, ","desc":"Gets the theme support arguments passed when registering that support"},"remove_theme_support":{"params":"string $feature the feature being added, ","desc":"Allows a theme to de-register its support of a certain feature"},"_remove_theme_support":{"params":"","desc":"Do not use. Removes theme support internally, ignorant of the blacklist."},"current_theme_supports":{"params":"string $feature the feature being checked, ","desc":"Checks a theme&#039;s support for a given feature"},"require_if_theme_supports":{"params":"string $feature the feature being checked, string $include the file containing the functions that implement the feature, ","desc":"Checks a theme&#039;s support for a given feature before loading the functions which implement it."},"_delete_attachment_theme_mod":{"params":"int $id the attachment id, ","desc":"Checks an attachment being deleted to see if it&#039;s a header or background image."},"check_theme_switched":{"params":"","desc":"Checks if a theme has been changed and runs &#039;after_switch_theme&#039; hook on the next WP load"},"set_current_user":{"params":"int|null $id User ID., string $name Optional. The user&#039;s username, ","desc":"Changes the current user by ID or name."},"get_userdatabylogin":{"params":"string $user_login User&#039;s username, ","desc":"Retrieve user info by login name."},"get_user_by_email":{"params":"string $email User&#039;s email address, ","desc":"Retrieve user info by email."},"wp_setcookie":{"params":"string $username The user&#039;s username, string $password Optional. The user&#039;s password, bool $already_md5 Optional. Whether the password has already been through MD5, string $home Optional. Will be used instead of COOKIEPATH if set, string $siteurl Optional. Will be used instead of SITECOOKIEPATH if set, bool $remember Optional. Remember that the user is logged in, ","desc":"Sets a cookie for a user who just logged in. This function is deprecated."},"wp_clearcookie":{"params":"","desc":"Clears the authentication cookie, logging the user out. This function is deprecated."},"wp_get_cookie_login":{"params":"","desc":"Gets the user cookie login. This function is deprecated."},"wp_login":{"params":"string $username User&#039;s username, string $password User&#039;s password, bool $deprecated Not used, ","desc":"Checks a users login information and logs them in if it checks out. This function is deprecated."},"wp_set_current_user":{"params":"int $id User ID, string $name User&#039;s username, ","desc":"Changes the current user by ID or name."},"wp_get_current_user":{"params":"","desc":"Retrieve the current user object."},"get_currentuserinfo":{"params":"","desc":"Populate global variables with information about the currently logged in user."},"get_userdata":{"params":"int $user_id User ID, ","desc":"Retrieve user info by user ID."},"get_user_by":{"params":"string $field The field to retrieve the user with. id | slug | email | login, int|string $value A value for $field. A user ID, slug, email address, or login name., ","desc":"Retrieve user info by a given field"},"cache_users":{"params":"array $user_ids User ID numbers list, ","desc":"Retrieve info for user lists to prevent multiple queries by get_userdata()"},"wp_mail":{"params":"string|array $to Array or comma-separated list of email addresses to send message., string $subject Email subject, string $message Message contents, string|array $headers Optional. Additional headers., string|array $attachments Optional. Files to attach., ","desc":"Send mail, similar to PHP&#039;s mail"},"wp_authenticate":{"params":"string $username User&#039;s username, string $password User&#039;s password, ","desc":"Checks a user&#039;s login information and logs them in if it checks out."},"wp_logout":{"params":"","desc":"Log the current user out."},"wp_validate_auth_cookie":{"params":"string $cookie Optional. If used, will validate contents instead of cookie&#039;s, string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in, ","desc":"Validates authentication cookie."},"wp_generate_auth_cookie":{"params":"int $user_id User ID, int $expiration Cookie expiration in seconds, string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in, ","desc":"Generate authentication cookie contents."},"wp_parse_auth_cookie":{"params":"string $cookie , string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in, ","desc":"Parse a cookie into its components"},"wp_set_auth_cookie":{"params":"int $user_id User ID, bool $remember Whether to remember the user, ","desc":"Sets the authentication cookies based User ID."},"wp_clear_auth_cookie":{"params":"","desc":"Removes all of the cookies associated with authentication."},"is_user_logged_in":{"params":"","desc":"Checks if the current visitor is a logged in user."},"auth_redirect":{"params":"","desc":"Checks if a user is logged in, if not it redirects them to the login page."},"check_admin_referer":{"params":"string $action Action nonce, string $query_arg where to look for nonce in $_REQUEST (since 2.5), ","desc":"Makes sure that a user was referred from another admin page."},"check_ajax_referer":{"params":"string $action Action nonce, string $query_arg where to look for nonce in $_REQUEST (since 2.5), ","desc":"Verifies the AJAX request to prevent processing requests external of the blog."},"wp_redirect":{"params":"string $location The path to redirect to, int $status Status code to use, ","desc":"Redirects to another page."},"wp_sanitize_redirect":{"params":"","desc":"Sanitizes a URL for use in a redirect."},"wp_safe_redirect":{"params":"","desc":"Performs a safe (local) redirect, using wp_redirect()."},"wp_validate_redirect":{"params":"string $location The redirect to validate, string $default The value to return is $location is not allowed, ","desc":"Validates a URL for use in a redirect."},"wp_notify_postauthor":{"params":"int $comment_id Comment ID, string $comment_type Optional. The comment type either &#039;comment&#039; (default), &#039;trackback&#039;, or &#039;pingback&#039;, ","desc":"Notify an author of a comment/trackback/pingback to one of their posts."},"wp_notify_moderator":{"params":"int $comment_id Comment ID, ","desc":"Notifies the moderator of the blog about a new comment that is awaiting approval."},"wp_password_change_notification":{"params":"object $user User Object, ","desc":"Notify the blog admin of a user changing password, normally via email."},"wp_new_user_notification":{"params":"int $user_id User ID, string $plaintext_pass Optional. The user&#039;s plaintext password, ","desc":"Notify the blog admin of a new user, normally via email."},"wp_nonce_tick":{"params":"","desc":"Get the time-dependent variable for nonce creation."},"wp_verify_nonce":{"params":"string $nonce Nonce that was used in the form to verify, string|int $action Should give context to what is taking place and be the same when nonce was created., ","desc":"Verify that correct nonce was used with time limit."},"wp_create_nonce":{"params":"string|int $action Scalar value to add context to the nonce., ","desc":"Creates a random, one time use token."},"wp_salt":{"params":"string $scheme Authentication scheme, ","desc":"Get salt to add to hashes to help prevent attacks."},"wp_hash":{"params":"string $data Plain text to hash, ","desc":"Get hash of given string."},"wp_hash_password":{"params":"string $password Plain text user password to hash, ","desc":"Create a hash (encrypt) of a plain text password."},"wp_check_password":{"params":"string $password Plaintext user&#039;s password, string $hash Hash of the user&#039;s password to check against., ","desc":"Checks the plaintext password against the encrypted Password."},"wp_generate_password":{"params":"int $length The length of password to generate, bool $special_chars Whether to include standard special characters. Default true., bool $extra_special_chars Whether to include other special characters. Used when generating secret keys and salts. Default false., ","desc":"Generates a random password drawn from the defined set of characters."},"wp_rand":{"params":"int $min Lower limit for the generated number (optional, default is 0), int $max Upper limit for the generated number (optional, default is 4294967295), ","desc":"Generates a random number"},"wp_set_password":{"params":"string $password The plaintext new user password, int $user_id User ID, ","desc":"Updates the user&#039;s password with a new encrypted one."},"get_avatar":{"params":"int|string|object $id_or_email A user ID, email address, or comment object, int $size Size of the avatar image, string $default URL to a default image to use if no avatar is available, string $alt Alternate text to use in image tag. Defaults to blank, ","desc":"Retrieve the avatar for a user who provided a user ID or email address."},"wp_text_diff":{"params":"string $left_string &quot;old&quot; (left) version of string, string $right_string &quot;new&quot; (right) version of string, string|array $args Optional. Change &#039;title&#039;, &#039;title_left&#039;, and &#039;title_right&#039; defaults., ","desc":"Displays a human readable HTML representation of the difference between two strings."},"get_comment_author":{"params":"int $comment_ID The ID of the comment for which to retrieve the author. Optional., ","desc":"Retrieve the author of the current comment."},"comment_author":{"params":"int $comment_ID The ID of the comment for which to print the author. Optional., ","desc":"Displays the author of the current comment."},"get_comment_author_email":{"params":"int $comment_ID The ID of the comment for which to get the author&#039;s email. Optional., ","desc":"Retrieve the email of the author of the current comment."},"comment_author_email":{"params":"int $comment_ID The ID of the comment for which to print the author&#039;s email. Optional., ","desc":"Display the email of the author of the current global $comment."},"comment_author_email_link":{"params":"string $linktext The text to display instead of the comment author&#039;s email address, string $before The text or HTML to display before the email link., string $after The text or HTML to display after the email link., ","desc":"Display the html email link to the author of the current comment."},"get_comment_author_email_link":{"params":"string $linktext The text to display instead of the comment author&#039;s email address, string $before The text or HTML to display before the email link., string $after The text or HTML to display after the email link., ","desc":"Return the html email link to the author of the current comment."},"get_comment_author_link":{"params":"int $comment_ID The ID of the comment for which to get the author&#039;s link. Optional., ","desc":"Retrieve the html link to the url of the author of the current comment."},"comment_author_link":{"params":"int $comment_ID The ID of the comment for which to print the author&#039;s link. Optional., ","desc":"Display the html link to the url of the author of the current comment."},"get_comment_author_IP":{"params":"int $comment_ID The ID of the comment for which to get the author&#039;s IP address. Optional., ","desc":"Retrieve the IP address of the author of the current comment."},"comment_author_IP":{"params":"int $comment_ID The ID of the comment for which to print the author&#039;s IP address. Optional., ","desc":"Display the IP address of the author of the current comment."},"get_comment_author_url":{"params":"int $comment_ID The ID of the comment for which to get the author&#039;s URL. Optional., ","desc":"Retrieve the url of the author of the current comment."},"comment_author_url":{"params":"int $comment_ID The ID of the comment for which to print the author&#039;s URL. Optional., ","desc":"Display the url of the author of the current comment."},"get_comment_author_url_link":{"params":"string $linktext The text to display instead of the comment author&#039;s email address, string $before The text or HTML to display before the email link., string $after The text or HTML to display after the email link., ","desc":"Retrieves the HTML link of the url of the author of the current comment."},"comment_author_url_link":{"params":"string $linktext The text to display instead of the comment author&#039;s email address, string $before The text or HTML to display before the email link., string $after The text or HTML to display after the email link., ","desc":"Displays the HTML link of the url of the author of the current comment."},"comment_class":{"params":"string|array $class One or more classes to add to the class list, int $comment_id An optional comment ID, int $post_id An optional post ID, bool $echo Whether comment_class should echo or return, ","desc":"Generates semantic classes for each comment element"},"get_comment_class":{"params":"string|array $class One or more classes to add to the class list, int $comment_id An optional comment ID, int $post_id An optional post ID, ","desc":"Returns the classes for the comment div as an array"},"get_comment_date":{"params":"string $d The format of the date (defaults to user&#039;s config), int $comment_ID The ID of the comment for which to get the date. Optional., ","desc":"Retrieve the comment date of the current comment."},"comment_date":{"params":"string $d The format of the date (defaults to user&#039;s config), int $comment_ID The ID of the comment for which to print the date. Optional., ","desc":"Display the comment date of the current comment."},"get_comment_excerpt":{"params":"int $comment_ID The ID of the comment for which to get the excerpt. Optional., ","desc":"Retrieve the excerpt of the current comment."},"comment_excerpt":{"params":"int $comment_ID The ID of the comment for which to print the excerpt. Optional., ","desc":"Display the excerpt of the current comment."},"get_comment_ID":{"params":"","desc":"Retrieve the comment id of the current comment."},"comment_ID":{"params":"","desc":"Displays the comment id of the current comment."},"get_comment_link":{"params":"object|string|int $comment Comment to retrieve., array $args Optional args., ","desc":"Retrieve the link to a given comment."},"get_comments_link":{"params":"int $post_id Optional post id, ","desc":"Retrieves the link to the current post comments."},"comments_link":{"params":"string $deprecated Not Used, bool $deprecated_2 Not Used, ","desc":"Displays the link to the current post comments."},"get_comments_number":{"params":"int $post_id The Post ID, ","desc":"Retrieve the amount of comments a post has."},"comments_number":{"params":"string $zero Text for no comments, string $one Text for one comment, string $more Text for more than one comment, string $deprecated Not used., ","desc":"Display the language string for the number of comments the current post has."},"get_comment_text":{"params":"int $comment_ID The ID of the comment for which to get the text. Optional., ","desc":"Retrieve the text of the current comment."},"comment_text":{"params":"int $comment_ID The ID of the comment for which to print the text. Optional., ","desc":"Displays the text of the current comment."},"get_comment_time":{"params":"string $d Optional. The format of the time (defaults to user&#039;s config), bool $gmt Whether to use the GMT date, bool $translate Whether to translate the time (for use in feeds), ","desc":"Retrieve the comment time of the current comment."},"comment_time":{"params":"string $d Optional. The format of the time (defaults to user&#039;s config), ","desc":"Display the comment time of the current comment."},"get_comment_type":{"params":"int $comment_ID The ID of the comment for which to get the type. Optional., ","desc":"Retrieve the comment type of the current comment."},"comment_type":{"params":"string $commenttxt The string to display for comment type, string $trackbacktxt The string to display for trackback type, string $pingbacktxt The string to display for pingback type, ","desc":"Display the comment type of the current comment."},"get_trackback_url":{"params":"","desc":"Retrieve The current post&#039;s trackback URL."},"trackback_url":{"params":"bool $deprecated_echo Remove backwards compat in 2.5, ","desc":"Displays the current post&#039;s trackback URL."},"trackback_rdf":{"params":"int $deprecated Not used (Was $timezone = 0), ","desc":"Generates and displays the RDF for the trackback information of current post."},"comments_open":{"params":"int $post_id An optional post ID to check instead of the current post., ","desc":"Whether the current post is open for comments."},"pings_open":{"params":"int $post_id An optional post ID to check instead of the current post., ","desc":"Whether the current post is open for pings."},"wp_comment_form_unfiltered_html_nonce":{"params":"","desc":"Displays form token for unfiltered comments."},"comments_template":{"params":"string $file Optional, default &#039;/comments.php&#039;. The file to load, bool $separate_comments Optional, whether to separate the comments by comment type. Default is false., ","desc":"Loads the comment template specified in $file."},"comments_popup_script":{"params":"int $width Optional. The width of the popup window, int $height Optional. The height of the popup window, string $file Optional. Sets the location of the popup window, ","desc":"Displays the JS popup script to show a comment."},"comments_popup_link":{"params":"string $zero The string to display when no comments, string $one The string to display when only one comment is available, string $more The string to display when there are more than one comment, string $css_class The CSS class to use for comments, string $none The string to display when comments have been turned off, ","desc":"Displays the link to the comments popup window for the current post ID."},"get_comment_reply_link":{"params":"array $args Optional. Override default options., int $comment Optional. Comment being replied to., int $post Optional. Post that the comment is going to be displayed on., ","desc":"Retrieve HTML content for reply to comment link."},"comment_reply_link":{"params":"array $args Optional. Override default options., int $comment Optional. Comment being replied to., int $post Optional. Post that the comment is going to be displayed on., ","desc":"Displays the HTML content for reply to comment link."},"get_post_reply_link":{"params":"array $args Optional. Override default options., int|object $post Optional. Post that the comment is going to be displayed on. Defaults to current post., ","desc":"Retrieve HTML content for reply to post link."},"post_reply_link":{"params":"array $args Optional. Override default options., int|object $post Optional. Post that the comment is going to be displayed on., ","desc":"Displays the HTML content for reply to post link."},"get_cancel_comment_reply_link":{"params":"string $text Optional. Text to display for cancel reply link., ","desc":"Retrieve HTML content for cancel comment reply link."},"cancel_comment_reply_link":{"params":"string $text Optional. Text to display for cancel reply link., ","desc":"Display HTML content for cancel comment reply link."},"get_comment_id_fields":{"params":"","desc":"Retrieve hidden input HTML for replying to comments."},"comment_id_fields":{"params":"","desc":"Output hidden input HTML for replying to comments."},"comment_form_title":{"params":"string $noreplytext Optional. Text to display when not replying to a comment., string $replytext Optional. Text to display when replying to a comment. Accepts &quot;%s&quot; for the author of the comment being replied to., string $linktoparent Optional. Boolean to control making the author&#039;s name a link to their comment., ","desc":"Display text based on comment reply status. Only affects users with Javascript disabled."},"wp_list_comments":{"params":"string|array $args Formatting options, array $comments Optional array of comment objects. Defaults to $wp_query-&gt;comments, ","desc":"List comments"},"comment_form":{"params":"array $args Options for strings, fields etc in the form, mixed $post_id Post ID to generate the form for, uses the current post if null, ","desc":"Outputs a complete commenting form for use within a template."},"is_wp_error":{"params":"mixed $thing Check if unknown variable is WordPress Error object., ","desc":"Check whether variable is a WordPress Error."},"image_constrain_size_for_editor":{"params":"int $width Width of the image, int $height Height of the image, string|array $size Size of what the result image should be., ","desc":"Scale down the default size of an image."},"image_hwstring":{"params":"int|string $width Optional. Width attribute value., int|string $height Optional. Height attribute value., ","desc":"Retrieve width and height attributes using given width and height values."},"image_downsize":{"params":"int $id Attachment ID for image., array|string $size Optional, default is &#039;medium&#039;. Size of image, either array or string., ","desc":"Scale an image to fit a particular size (such as &#039;thumb&#039; or &#039;medium&#039;)."},"add_image_size":{"params":"","desc":"Registers a new image size"},"set_post_thumbnail_size":{"params":"","desc":"Registers an image size for the post thumbnail"},"get_image_tag":{"params":"int $id Attachment ID., string $alt Image Description for the alt attribute., string $title Image Description for the title attribute., string $align Part of the class name for aligning the image., string $size Optional. Default is &#039;medium&#039;., ","desc":"An &lt;img src /&gt; tag for an image attachment, scaling it down if requested."},"wp_load_image":{"params":"string $file Filename of the image to load., ","desc":"Load an image from a string, if PHP supports it."},"wp_constrain_dimensions":{"params":"int $current_width Current width of the image., int $current_height Current height of the image., int $max_width Optional. Maximum wanted width., int $max_height Optional. Maximum wanted height., ","desc":"Calculates the new dimensions for a downsampled image."},"image_resize_dimensions":{"params":"int $orig_w Original width., int $orig_h Original height., int $dest_w New width., int $dest_h New height., bool $crop Optional, default is false. Whether to crop image or resize., ","desc":"Retrieve calculated resized dimensions for use in imagecopyresampled()."},"image_resize":{"params":"string $file Image file path., int $max_w Maximum width to resize to., int $max_h Maximum height to resize to., bool $crop Optional. Whether to crop image or resize., string $suffix Optional. File suffix., string $dest_path Optional. New image file path., int $jpeg_quality Optional, default is 90. Image quality percentage., ","desc":"Scale down an image to fit a particular size and save a new copy of the image."},"image_make_intermediate_size":{"params":"string $file File path., int $width Image width., int $height Image height., bool $crop Optional, default is false. Whether to crop image to specified height and width or resize., ","desc":"Resize an image to make a thumbnail or intermediate size."},"image_get_intermediate_size":{"params":"int $post_id Attachment ID for image., array|string $size Optional, default is &#039;thumbnail&#039;. Size of image, either array or string., ","desc":"Retrieve the image&#039;s intermediate size (resized) path, width, and height."},"get_intermediate_image_sizes":{"params":"","desc":"Get the available image sizes"},"wp_get_attachment_image_src":{"params":"int $attachment_id Image attachment ID., string $size Optional, default is &#039;thumbnail&#039;., bool $icon Optional, default is false. Whether it is an icon., ","desc":"Retrieve an image to represent an attachment."},"wp_get_attachment_image":{"params":"int $attachment_id Image attachment ID., string $size Optional, default is &#039;thumbnail&#039;., bool $icon Optional, default is false. Whether it is an icon., ","desc":"Get an HTML img element representing an image attachment"},"_wp_post_thumbnail_class_filter":{"params":"array $attr Attributes including src, class, alt, title, ","desc":"Adds a &#039;wp-post-image&#039; class to post thumbnails Uses the begin_fetch_post_thumbnail_html and end_fetch_post_thumbnail_html action hooks to dynamically add/remove itself so as to only filter post thumbnails"},"_wp_post_thumbnail_class_filter_add":{"params":"","desc":"Adds _wp_post_thumbnail_class_filter to the wp_get_attachment_image_attributes filter"},"_wp_post_thumbnail_class_filter_remove":{"params":"","desc":"Removes _wp_post_thumbnail_class_filter from the wp_get_attachment_image_attributes filter"},"img_caption_shortcode":{"params":"array $attr Attributes attributed to the shortcode., string $content Optional. Shortcode content., ","desc":"The Caption shortcode."},"gallery_shortcode":{"params":"array $attr Attributes of the shortcode., ","desc":"The Gallery shortcode."},"previous_image_link":{"params":"string $size Optional, default is &#039;thumbnail&#039;. Size of image, either array or string. 0 or &#039;none&#039; will default to post_title or $text;, string $text Optional, default is false. If included, link will reflect $text variable., ","desc":"Display previous image link that has the same post parent."},"next_image_link":{"params":"string $size Optional, default is &#039;thumbnail&#039;. Size of image, either array or string. 0 or &#039;none&#039; will default to post_title or $text;, string $text Optional, default is false. If included, link will reflect $text variable., ","desc":"Display next image link that has the same post parent."},"adjacent_image_link":{"params":"bool $prev Optional. Default is true to display previous link, false for next., ","desc":"Display next or previous image link that has the same post parent."},"get_attachment_taxonomies":{"params":"int|array|object $attachment Attachment ID, Attachment data array, or Attachment data object., ","desc":"Retrieve taxonomies attached to the attachment."},"gd_edit_image_support":{"params":"string $mime_type , ","desc":"Check if the installed version of GD supports particular image type"},"wp_imagecreatetruecolor":{"params":"int $width Image width, int $height Image height, ","desc":"Create new GD image resource with transparency support"},"wp_embed_register_handler":{"params":"","desc":"Register an embed handler. This function should probably only be used for sites that do not support oEmbed."},"wp_embed_unregister_handler":{"params":"","desc":"Unregister a previously registered embed handler."},"wp_embed_defaults":{"params":"","desc":"Create default array of embed parameters."},"wp_expand_dimensions":{"params":"int $example_width The width of an example embed., int $example_height The height of an example embed., int $max_width The maximum allowed width., int $max_height The maximum allowed height., ","desc":"Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height."},"wp_oembed_get":{"params":"string $url The URL that should be embedded., array $args Additional arguments and parameters., ","desc":"Attempts to fetch the embed HTML for a provided URL using oEmbed."},"wp_oembed_add_provider":{"params":"string $format The format of URL that this provider can handle. You can use asterisks as wildcards., string $provider The URL to the oEmbed provider., boolean $regex Whether the $format parameter is in a regex format., ","desc":"Adds a URL format and oEmbed provider URL pair."},"wp_maybe_load_embeds":{"params":"","desc":"Determines if default embed handlers should be loaded."},"wp_embed_handler_googlevideo":{"params":"array $matches The regex matches from the provided regex when calling {@link wp_embed_register_handler()}., array $attr Embed attributes., string $url The original URL that was matched by the regex., array $rawattr The original unmodified attributes., ","desc":"The Google Video embed handler callback. Google Video does not support oEmbed."},"wp_cache_add":{"params":"int|string $key The cache key to use for retrieval later, mixed $data The data to add to the cache store, string $group The group to add the cache to, int $expire When the cache data should be expired, ","desc":"Adds data to the cache, if the cache key doesn&#039;t already exist."},"wp_cache_close":{"params":"","desc":"Closes the cache."},"wp_cache_decr":{"params":"int|string $key The cache key to increment, int $offset The amount by which to decrement the item&#039;s value. Default is 1., string $group The group the key is in., ","desc":"Decrement numeric cache item&#039;s value"},"wp_cache_delete":{"params":"int|string $key What the contents in the cache are called, string $group Where the cache contents are grouped, ","desc":"Removes the cache contents matching key and group."},"wp_cache_flush":{"params":"","desc":"Removes all cache items."},"wp_cache_get":{"params":"int|string $key What the contents in the cache are called, string $group Where the cache contents are grouped, bool $force Whether to force an update of the local cache from the persistent cache (default is false), ","desc":"Retrieves the cache contents from the cache by key and group."},"wp_cache_incr":{"params":"int|string $key The cache key to increment, int $offset The amount by which to increment the item&#039;s value. Default is 1., string $group The group the key is in., ","desc":"Increment numeric cache item&#039;s value"},"wp_cache_init":{"params":"","desc":"Sets up Object Cache Global and assigns it."},"wp_cache_replace":{"params":"int|string $key What to call the contents in the cache, mixed $data The contents to store in the cache, string $group Where to group the cache contents, int $expire When to expire the cache contents, ","desc":"Replaces the contents of the cache with new data."},"wp_cache_set":{"params":"int|string $key What to call the contents in the cache, mixed $data The contents to store in the cache, string $group Where to group the cache contents, int $expire When to expire the cache contents, ","desc":"Saves the data to the cache."},"wp_cache_add_global_groups":{"params":"string|array $groups A group or an array of groups to add, ","desc":"Adds a group or set of groups to the list of global groups."},"wp_cache_add_non_persistent_groups":{"params":"string|array $groups A group or an array of groups to add, ","desc":"Adds a group or set of groups to the list of non-persistent groups."},"wp_cache_reset":{"params":"","desc":"Reset internal cache keys and structures.  If the cache backend uses global blog or site IDs as part of its cache keys, this function instructs the backend to reset those keys and perform any cleanup since blog or site IDs have changed since cache init."},"wp_initial_constants":{"params":"","desc":"Defines initial WordPress constants"},"wp_plugin_directory_constants":{"params":"","desc":"Defines plugin directory WordPress constants"},"wp_cookie_constants":{"params":"","desc":"Defines cookie related WordPress constants"},"wp_ssl_constants":{"params":"","desc":"Defines cookie related WordPress constants"},"wp_functionality_constants":{"params":"","desc":"Defines functionality related WordPress constants"},"wp_templating_constants":{"params":"","desc":"Defines templating related WordPress constants"},"_":{"params":"","desc":""},"mb_substr":{"params":"","desc":""},"_mb_substr":{"params":"","desc":""},"hash_hmac":{"params":"","desc":""},"_hash_hmac":{"params":"","desc":""},"json_encode":{"params":"","desc":""},"json_decode":{"params":"","desc":""},"_json_decode_object_helper":{"params":"","desc":""},"wp_widget_rss_output":{"params":"string|array|object $rss RSS url., array $args Widget arguments., ","desc":"Display the RSS entries in a list."},"wp_widget_rss_form":{"params":"array|string $args Values for input fields., array $inputs Override default display options., ","desc":"Display RSS widget options form."},"wp_widget_rss_process":{"params":"array $widget_rss RSS widget feed data. Expects unescaped data., bool $check_feed Optional, default is true. Whether to check feed for errors., ","desc":"Process RSS feed widget data and optionally retrieve feed items."},"wp_widgets_init":{"params":"","desc":"Register all of the default WordPress widgets on startup."},"get_all_category_ids":{"params":"","desc":"Retrieves all category IDs."},"get_categories":{"params":"string|array $args Optional. Change the defaults retrieving categories., ","desc":"Retrieve list of category objects."},"get_category":{"params":"int|object $category Category ID or Category row object, string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N, string $filter Optional. Default is raw or no WordPress defined filter will applied., ","desc":"Retrieves category data given a category ID or category object."},"get_category_by_path":{"params":"string $category_path URL containing category slugs., bool $full_match Optional. Whether full path should be matched., string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N, ","desc":"Retrieve category based on URL containing the category slug."},"get_category_by_slug":{"params":"string $slug The category slug., ","desc":"Retrieve category object by category slug."},"get_cat_ID":{"params":"string $cat_name Optional. Default is &#039;General&#039; and can be any category name., ","desc":"Retrieve the ID of a category from its name."},"get_cat_name":{"params":"int $cat_id Category ID, ","desc":"Retrieve the name of a category from its ID."},"cat_is_ancestor_of":{"params":"int|object $cat1 ID or object to check if this is the parent category., int|object $cat2 The child category., ","desc":"Check if a category is an ancestor of another category."},"sanitize_category":{"params":"object|array $category Category data, string $context Optional. Default is &#039;display&#039;., ","desc":"Sanitizes category data based on context."},"sanitize_category_field":{"params":"string $field Category key to sanitize, mixed $value Category value to sanitize, int $cat_id Category ID, string $context What filter to use, &#039;raw&#039;, &#039;display&#039;, etc., ","desc":"Sanitizes data in single category key field."},"get_tags":{"params":"string|array $args Tag arguments to use when retrieving tags., ","desc":"Retrieves all post tags."},"get_tag":{"params":"int|object $tag , string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N, string $filter Optional. Default is raw or no WordPress defined filter will applied., ","desc":"Retrieve post tag by tag ID or tag object."},"clean_category_cache":{"params":"int $id Category ID, ","desc":"Remove the category cache data based on ID."},"_make_cat_compat":{"params":"array|object $category Category Row object or array, ","desc":"Update category structure to old pre 2.3 from new taxonomy structure."},"_wp_http_get_object":{"params":"","desc":"Returns the initialized WP_Http Object"},"wp_remote_request":{"params":"string $url Site URL to retrieve., array $args Optional. Override the defaults., ","desc":"Retrieve the raw response from the HTTP request."},"wp_remote_get":{"params":"string $url Site URL to retrieve., array $args Optional. Override the defaults., ","desc":"Retrieve the raw response from the HTTP request using the GET method."},"wp_remote_post":{"params":"string $url Site URL to retrieve., array $args Optional. Override the defaults., ","desc":"Retrieve the raw response from the HTTP request using the POST method."},"wp_remote_head":{"params":"string $url Site URL to retrieve., array $args Optional. Override the defaults., ","desc":"Retrieve the raw response from the HTTP request using the HEAD method."},"wp_remote_retrieve_headers":{"params":"array $response HTTP response., ","desc":"Retrieve only the headers from the raw response."},"wp_remote_retrieve_header":{"params":"array $response , string $header Header name to retrieve value from., ","desc":"Retrieve a single header by name from the raw response."},"wp_remote_retrieve_response_code":{"params":"array $response HTTP response., ","desc":"Retrieve only the response code from the raw response."},"wp_remote_retrieve_response_message":{"params":"array $response HTTP response., ","desc":"Retrieve only the response message from the raw response."},"wp_remote_retrieve_body":{"params":"array $response HTTP response., ","desc":"Retrieve only the body from the raw response."},"wp_http_supports":{"params":"array $capabilities Array of capabilities to test or a wp_remote_request() $args array., string $url Optional. If given, will check if the URL requires SSL and adds that requirement to the capabilities array., ","desc":"Determines if there is an HTTP Transport that can process this request."},"wptexturize":{"params":"string $text The text to be formatted, ","desc":"Replaces common plain text characters into formatted entities"},"_wptexturize_pushpop_element":{"params":"string $text Text to check. First character is assumed to be $opening, array $stack Array used as stack of opened tag elements, string $disabled_elements Tags to match against formatted as regexp sub-expression, string $opening Tag opening character, assumed to be 1 character long, string $opening Tag closing character, ","desc":"Search for disabled element tags. Push element to stack on tag open and pop on tag close. Assumes first character of $text is tag opening."},"clean_pre":{"params":"array|string $matches The array or string, ","desc":"Accepts matches array from preg_replace_callback in wpautop() or a string."},"wpautop":{"params":"string $pee The text which has to be formatted., int|bool $br Optional. If set, this will convert all remaining line-breaks after paragraphing. Default true., ","desc":"Replaces double line-breaks with paragraph elements."},"_autop_newline_preservation_helper":{"params":"array $matches preg_replace_callback matches array, ","desc":"Newline preservation help function for wpautop"},"shortcode_unautop":{"params":"string $pee The content., ","desc":"Don&#039;t auto-p wrap shortcodes that stand alone"},"seems_utf8":{"params":"string $str The string to be checked, ","desc":"Checks to see if a string is utf8 encoded."},"_wp_specialchars":{"params":"string $string The text which is to be encoded., mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old values; converting single quotes if set to &#039;single&#039;, double if set to &#039;double&#039; or both if otherwise set. Default is ENT_NOQUOTES., string $charset Optional. The character encoding of the string. Default is false., boolean $double_encode Optional. Whether to encode existing html entities. Default is false., ","desc":"Converts a number of special characters into their HTML entities."},"wp_specialchars_decode":{"params":"string $string The text which is to be decoded., mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to &#039;single&#039;, double if set to &#039;double&#039; or both if otherwise set. Default is ENT_NOQUOTES., ","desc":"Converts a number of HTML entities into their special characters."},"wp_check_invalid_utf8":{"params":"string $string The text which is to be checked., boolean $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false., ","desc":"Checks for invalid UTF8 in a string."},"utf8_uri_encode":{"params":"string $utf8_string , int $length Max length of the string, ","desc":"Encode the Unicode values to be used in the URI."},"remove_accents":{"params":"string $string Text that might have accent characters, ","desc":"Converts all accent characters to ASCII characters."},"sanitize_file_name":{"params":"string $filename The filename to be sanitized, ","desc":"Sanitizes a filename replacing whitespace with dashes"},"sanitize_user":{"params":"string $username The username to be sanitized., bool $strict If set limits $username to specific characters. Default false., ","desc":"Sanitize username stripping out unsafe characters."},"sanitize_key":{"params":"string $key String key, ","desc":"Sanitize a string key."},"sanitize_title":{"params":"string $title The string to be sanitized., string $fallback_title Optional. A title to use if $title is empty., string $context Optional. The operation for which the string is sanitized, ","desc":"Sanitizes title or use fallback title."},"sanitize_title_for_query":{"params":"","desc":""},"sanitize_title_with_dashes":{"params":"string $title The title to be sanitized., string $raw_title Optional. Not used., string $context Optional. The operation for which the string is sanitized., ","desc":"Sanitizes title, replacing whitespace and a few other characters with dashes."},"sanitize_sql_orderby":{"params":"string $orderby Order by string to be checked., ","desc":"Ensures a string is a valid SQL order by clause."},"sanitize_html_class":{"params":"string $class The classname to be sanitized, string $fallback Optional. The value to return if the sanitization end&#039;s up as an empty string. Defaults to an empty string., ","desc":"Santizes a html classname to ensure it only contains valid characters"},"convert_chars":{"params":"string $content String of characters to be converted., string $deprecated Not used., ","desc":"Converts a number of characters from a string."},"balanceTags":{"params":"string $text Text to be balanced, bool $force Forces balancing, ignoring the value of the option. Default false., ","desc":"Will only balance the tags if forced to and the option is set to balance tags."},"force_balance_tags":{"params":"string $text Text to be balanced., ","desc":"Balances tags of string using a modified stack."},"format_to_edit":{"params":"string $content The text about to be edited., bool $richedit Whether the $content should pass through htmlspecialchars(). Default false., ","desc":"Acts on text which is about to be edited."},"format_to_post":{"params":"string $content The text to pass through the filter., ","desc":"Holder for the &#039;format_to_post&#039; filter."},"zeroise":{"params":"mixed $number Number to append zeros to if not greater than threshold., int $threshold Digit places number needs to be to not have zeros added., ","desc":"Add leading zeros when necessary."},"backslashit":{"params":"string $string Value to which backslashes will be added., ","desc":"Adds backslashes before letters and before a number at the start of a string."},"trailingslashit":{"params":"string $string What to add the trailing slash to., ","desc":"Appends a trailing slash."},"untrailingslashit":{"params":"string $string What to remove the trailing slash from., ","desc":"Removes trailing slash if it exists."},"addslashes_gpc":{"params":"string $gpc The string returned from HTTP request data., ","desc":"Adds slashes to escape strings."},"stripslashes_deep":{"params":"array|string $value The array or string to be stripped., ","desc":"Navigates through an array and removes slashes from the values."},"urlencode_deep":{"params":"array|string $value The array or string to be encoded., ","desc":"Navigates through an array and encodes the values to be used in a URL."},"antispambot":{"params":"string $emailaddy Email address., int $mailto Optional. Range from 0 to 1. Used for encoding., ","desc":"Converts email addresses characters to HTML entities to block spam bots."},"_make_url_clickable_cb":{"params":"array $matches Single Regex Match., ","desc":"Callback to convert URI match to HTML A element."},"_make_web_ftp_clickable_cb":{"params":"array $matches Single Regex Match., ","desc":"Callback to convert URL match to HTML A element."},"_make_email_clickable_cb":{"params":"array $matches Single Regex Match., ","desc":"Callback to convert email address match to HTML A element."},"make_clickable":{"params":"string $ret Content to convert URIs., ","desc":"Convert plaintext URI to HTML links."},"wp_rel_nofollow":{"params":"string $text Content that may contain HTML A elements., ","desc":"Adds rel nofollow string to all HTML A elements in content."},"wp_rel_nofollow_callback":{"params":"array $matches Single Match, ","desc":"Callback to used to add rel=nofollow string to HTML A element."},"translate_smiley":{"params":"string $smiley Smiley code to convert to image., ","desc":"Convert one smiley code to the icon graphic file equivalent."},"convert_smilies":{"params":"string $text Content to convert smilies from text., ","desc":"Convert text equivalent of smilies to images."},"is_email":{"params":"string $email Email address to verify., boolean $deprecated Deprecated., ","desc":"Verifies that an email is valid."},"wp_iso_descrambler":{"params":"string $string Subject line, ","desc":"Convert to ASCII from email subjects."},"_wp_iso_convert":{"params":"array $match the preg_replace_callback matches array, ","desc":"Helper function to convert hex encoded chars to ascii"},"get_gmt_from_date":{"params":"string $string The date to be converted., string $format The format string for the returned date (default is Y-m-d H:i:s), ","desc":"Returns a date in the GMT equivalent."},"get_date_from_gmt":{"params":"string $string The date to be converted., string $format The format string for the returned date (default is Y-m-d H:i:s), ","desc":"Converts a GMT date into the correct format for the blog."},"iso8601_timezone_to_offset":{"params":"string $timezone Either &#039;Z&#039; for 0 offset or &#039;\u00b1hhmm&#039;., ","desc":"Computes an offset in seconds from an iso8601 timezone."},"iso8601_to_datetime":{"params":"string $date_string Date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}., string $timezone Optional. If set to GMT returns the time minus gmt_offset. Default is &#039;user&#039;., ","desc":"Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt]."},"popuplinks":{"params":"string $text Content to replace links to open in a new window., ","desc":"Adds a element attributes to open links in new windows."},"sanitize_email":{"params":"string $email Email address to filter., ","desc":"Strips out all characters that are not allowable in an email."},"human_time_diff":{"params":"int $from Unix timestamp from which the difference begins., int $to Optional. Unix timestamp to end the time difference. Default becomes time() if not set., ","desc":"Determines the difference between two timestamps."},"wp_trim_excerpt":{"params":"string $text Optional. The excerpt. If set to empty, an excerpt is generated., ","desc":"Generates an excerpt from the content, if needed."},"wp_trim_words":{"params":"string $text Text to trim., int $num_words Number of words. Default 55., string $more What to append if $text needs to be trimmed. Default &#039;&amp;hellip;&#039;., ","desc":"Trims text to a certain number of words."},"ent2ncr":{"params":"string $text The text within which entities will be converted., ","desc":"Converts named entities into numbered entities."},"wp_richedit_pre":{"params":"string $text The text to be formatted., ","desc":"Formats text for the rich text editor."},"wp_htmledit_pre":{"params":"string $output The text to be formatted., ","desc":"Formats text for the HTML editor."},"_deep_replace":{"params":"string|array $search , string $subject , ","desc":"Perform a deep string replace operation to ensure the values in $search are no longer present"},"esc_sql":{"params":"string $sql Unescaped SQL data, ","desc":"Escapes data for use in a MySQL query"},"esc_url":{"params":"string $url The URL to be cleaned., array $protocols Optional. An array of acceptable protocols. Defaults to &#039;http&#039;, &#039;https&#039;, &#039;ftp&#039;, &#039;ftps&#039;, &#039;mailto&#039;, &#039;news&#039;, &#039;irc&#039;, &#039;gopher&#039;, &#039;nntp&#039;, &#039;feed&#039;, &#039;telnet&#039;, &#039;mms&#039;, &#039;rtsp&#039;, &#039;svn&#039; if not set., string $_context Private. Use esc_url_raw() for database usage., ","desc":"Checks and cleans a URL."},"esc_url_raw":{"params":"string $url The URL to be cleaned., array $protocols An array of acceptable protocols., ","desc":"Performs esc_url() for database usage."},"htmlentities2":{"params":"string $myHTML The text to be converted., ","desc":"Convert entities, while preserving already-encoded entities."},"esc_js":{"params":"string $text The text to be escaped., ","desc":"Escape single quotes, htmlspecialchar &quot; &lt; &gt; &amp;, and fix line endings."},"esc_html":{"params":"string $text , ","desc":"Escaping for HTML blocks."},"esc_attr":{"params":"string $text , ","desc":"Escaping for HTML attributes."},"esc_textarea":{"params":"string $text , ","desc":"Escaping for textarea values."},"tag_escape":{"params":"string $tag_name , ","desc":"Escape a HTML tag name."},"like_escape":{"params":"string $text The text to be escaped., ","desc":"Escapes text for SQL LIKE special characters % and _."},"wp_make_link_relative":{"params":"string $link Full URL path., ","desc":"Convert full URL paths to absolute paths."},"sanitize_option":{"params":"string $option The name of the option., string $value The unsanitised value., ","desc":"Sanitises various option values based on the nature of the option."},"wp_parse_str":{"params":"string $string The string to be parsed., array $array Variables will be stored in this array., ","desc":"Parses a string into variables to be stored in an array."},"wp_pre_kses_less_than":{"params":"string $text Text to be converted., ","desc":"Convert lone less than signs."},"wp_pre_kses_less_than_callback":{"params":"array $matches Populated by matches to preg_replace., ","desc":"Callback function used by preg_replace."},"wp_sprintf":{"params":"string $pattern The string which formatted args are inserted., mixed $args,... Arguments to be formatted into the $pattern string., ","desc":"WordPress implementation of PHP sprintf() with filters."},"wp_sprintf_l":{"params":"string $pattern Content containing &#039;%l&#039; at the beginning., array $args List items to prepend to the content and replace &#039;%l&#039;., ","desc":"Localize list items before the rest of the content."},"wp_html_excerpt":{"params":"integer $str String to get the excerpt from., integer $count Maximum number of characters to take., ","desc":"Safely extracts not more than the first $count characters from html string."},"links_add_base_url":{"params":"string $content String to search for links in., string $base The base URL to prefix to links., array $attrs The attributes which should be processed., ","desc":"Add a Base url to relative links in passed content."},"_links_add_base":{"params":"string $m The matched link., ","desc":"Callback to add a base url to relative links in passed content."},"links_add_target":{"params":"string $content String to search for links in., string $target The Target to add to the links., array $tags An array of tags to apply to., ","desc":"Adds a Target attribute to all links in passed content."},"_links_add_target":{"params":"string $m The matched link., ","desc":"Callback to add a target attribute to all links in passed content."},"normalize_whitespace":{"params":"","desc":""},"wp_strip_all_tags":{"params":"string $string String containing HTML tags, bool $remove_breaks optional Whether to remove left over line breaks and white space chars, ","desc":"Properly strip all HTML tags including script and style"},"sanitize_text_field":{"params":"string $str , ","desc":"Sanitize a string from user input or from the db"},"wp_basename":{"params":"string $path A path., string $suffix If the filename ends in suffix this will also be cut off., ","desc":"i18n friendly version of basename()"},"capital_P_dangit":{"params":"","desc":"Forever eliminate &quot;Wordpress&quot; from the planet (or at least the little bit we can influence)."},"sanitize_mime_type":{"params":"string $mime_type Mime type, ","desc":"Sanitize a mime type"},"wp_kses":{"params":"string $string Content to filter through kses, array $allowed_html List of allowed HTML elements, array $allowed_protocols Optional. Allowed protocol in links., ","desc":"Filters content and keeps only allowable HTML elements."},"wp_kses_hook":{"params":"string $string Content to filter through kses, array $allowed_html List of allowed HTML elements, array $allowed_protocols Allowed protocol in links, ","desc":"You add any kses hooks here."},"wp_kses_version":{"params":"","desc":"This function returns kses&#039; version number."},"wp_kses_split":{"params":"string $string Content to filter, array $allowed_html Allowed HTML elements, array $allowed_protocols Allowed protocols to keep, ","desc":"Searches for HTML tags, no matter how malformed."},"_wp_kses_split_callback":{"params":"","desc":"Callback for wp_kses_split."},"wp_kses_split2":{"params":"string $string Content to filter, array $allowed_html Allowed HTML elements, array $allowed_protocols Allowed protocols to keep, ","desc":"Callback for wp_kses_split for fixing malformed HTML tags."},"wp_kses_attr":{"params":"string $element HTML element/tag, string $attr HTML attributes from HTML element to closing HTML element tag, array $allowed_html Allowed HTML elements, array $allowed_protocols Allowed protocols to keep, ","desc":"Removes all attributes, if none are allowed for this element."},"wp_kses_hair":{"params":"string $attr Attribute list from HTML element to closing HTML element tag, array $allowed_protocols Allowed protocols to keep, ","desc":"Builds an attribute list from string containing attributes."},"wp_kses_check_attr_val":{"params":"string $value Attribute value, string $vless Whether the value is valueless. Use &#039;y&#039; or &#039;n&#039;, string $checkname What $checkvalue is checking for., mixed $checkvalue What constraint the value should pass, ","desc":"Performs different checks for attribute values."},"wp_kses_bad_protocol":{"params":"string $string Content to filter bad protocols from, array $allowed_protocols Allowed protocols to keep, ","desc":"Sanitize string from bad protocols."},"wp_kses_no_null":{"params":"string $string , ","desc":"Removes any NULL characters in $string."},"wp_kses_stripslashes":{"params":"string $string String to strip slashes, ","desc":"Strips slashes from in front of quotes."},"wp_kses_array_lc":{"params":"array $inarray Unfiltered array, ","desc":"Goes through an array and changes the keys to all lower case."},"wp_kses_js_entities":{"params":"string $string , ","desc":"Removes the HTML JavaScript entities found in early versions of Netscape 4."},"wp_kses_html_error":{"params":"string $string , ","desc":"Handles parsing errors in wp_kses_hair()."},"wp_kses_bad_protocol_once":{"params":"string $string Content to check for bad protocols, string $allowed_protocols Allowed protocols, ","desc":"Sanitizes content from bad protocols and other characters."},"wp_kses_bad_protocol_once2":{"params":"string $string URI scheme to check against the whitelist, string $allowed_protocols Allowed protocols, ","desc":"Callback for wp_kses_bad_protocol_once() regular expression."},"wp_kses_normalize_entities":{"params":"string $string Content to normalize entities, ","desc":"Converts and fixes HTML entities."},"wp_kses_named_entities":{"params":"array $matches preg_replace_callback() matches array, ","desc":"Callback for wp_kses_normalize_entities() regular expression."},"wp_kses_normalize_entities2":{"params":"array $matches preg_replace_callback() matches array, ","desc":"Callback for wp_kses_normalize_entities() regular expression."},"wp_kses_normalize_entities3":{"params":"array $matches preg_replace_callback() matches array, ","desc":"Callback for wp_kses_normalize_entities() for regular expression."},"valid_unicode":{"params":"int $i Unicode value, ","desc":"Helper function to determine if a Unicode value is valid."},"wp_kses_decode_entities":{"params":"string $string Content to change entities, ","desc":"Convert all entities to their character counterparts."},"_wp_kses_decode_entities_chr":{"params":"array $match preg match, ","desc":"Regex callback for wp_kses_decode_entities()"},"_wp_kses_decode_entities_chr_hexdec":{"params":"array $match preg match, ","desc":"Regex callback for wp_kses_decode_entities()"},"wp_filter_kses":{"params":"string $data Content to filter, expected to be escaped with slashes, ","desc":"Sanitize content with allowed HTML Kses rules."},"wp_kses_data":{"params":"string $data Content to filter, expected to not be escaped, ","desc":"Sanitize content with allowed HTML Kses rules."},"wp_filter_post_kses":{"params":"string $data Post content to filter, expected to be escaped with slashes, ","desc":"Sanitize content for allowed HTML tags for post content."},"wp_kses_post":{"params":"string $data Post content to filter, ","desc":"Sanitize content for allowed HTML tags for post content."},"wp_filter_nohtml_kses":{"params":"string $data Content to strip all HTML from, ","desc":"Strips all of the HTML in the content."},"kses_init_filters":{"params":"","desc":"Adds all Kses input form content filters."},"kses_remove_filters":{"params":"","desc":"Removes all Kses input form content filters."},"kses_init":{"params":"","desc":"Sets up most of the Kses filters for input form content."},"safecss_filter_attr":{"params":"","desc":"Inline CSS filter"},"create_initial_post_types":{"params":"","desc":"Creates the initial post types when &#039;init&#039; action is fired."},"get_attached_file":{"params":"int $attachment_id Attachment ID., bool $unfiltered Whether to apply filters., ","desc":"Retrieve attached file path based on attachment ID."},"update_attached_file":{"params":"int $attachment_id Attachment ID, string $file File path for the attachment, ","desc":"Update attachment file path based on attachment ID."},"_wp_relative_upload_path":{"params":"string $path Full path to the file, ","desc":"Return relative path to an uploaded file."},"get_children":{"params":"mixed $args Optional. User defined arguments for replacing the defaults., string $output Optional. Constant for return type, either OBJECT (default), ARRAY_A, ARRAY_N., ","desc":"Retrieve all children of the post parent ID."},"get_extended":{"params":"string $post Post content., ","desc":"Get extended entry info (&lt;!--more--&gt;)."},"get_post":{"params":"int|object $post Post ID or post object., string $output Optional, default is Object. Either OBJECT, ARRAY_A, or ARRAY_N., string $filter Optional, default is raw., ","desc":"Retrieves post data given a post ID or post object."},"get_post_ancestors":{"params":"int|object $post Post ID or post object, ","desc":"Retrieve ancestors of a post."},"get_post_field":{"params":"string $field Post field name, id $post Post ID, string $context Optional. How to filter the field. Default is display., ","desc":"Retrieve data from a post field based on Post ID."},"get_post_mime_type":{"params":"int $ID Optional. Post ID., ","desc":"Retrieve the mime type of an attachment based on the ID."},"get_post_format":{"params":"int|object $post A post, ","desc":"Retrieve the format slug for a post"},"has_post_format":{"params":"string $format The format to check for, object|id $post The post to check. If not supplied, defaults to the current post if used in the loop., ","desc":"Check if a post has a particular format"},"set_post_format":{"params":"int|object $post The post for which to assign a format, string $format A format to assign. Use an empty string or array to remove all formats from the post., ","desc":"Assign a format to a post"},"get_post_status":{"params":"int $ID Post ID, ","desc":"Retrieve the post status based on the Post ID."},"get_post_statuses":{"params":"","desc":"Retrieve all of the WordPress supported post statuses."},"get_page_statuses":{"params":"","desc":"Retrieve all of the WordPress support page statuses."},"register_post_status":{"params":"string $post_status Name of the post status., array|string $args See above description., ","desc":"Register a post type. Do not use before init."},"get_post_status_object":{"params":"string $post_status The name of a registered post status, ","desc":"Retrieve a post status object by name"},"get_post_stati":{"params":"array|string $args An array of key =&gt; value arguments to match against the post status objects., string $output The type of output to return, either post status &#039;names&#039; or &#039;objects&#039;. &#039;names&#039; is the default., string $operator The logical operation to perform. &#039;or&#039; means only one element from the array needs to match; &#039;and&#039; means all elements must match. The default is &#039;and&#039;., ","desc":"Get a list of all registered post status objects."},"is_post_type_hierarchical":{"params":"string $post_type Post type name, ","desc":"Whether the post type is hierarchical."},"post_type_exists":{"params":"string $post_type Post type name, ","desc":"Checks if a post type is registered."},"get_post_type":{"params":"mixed $the_post Optional. Post object or post ID., ","desc":"Retrieve the post type of the current post or of a given post."},"get_post_type_object":{"params":"string $post_type The name of a registered post type, ","desc":"Retrieve a post type object by name"},"get_post_types":{"params":"array|string $args An array of key =&gt; value arguments to match against the post type objects., string $output The type of output to return, either post type &#039;names&#039; or &#039;objects&#039;. &#039;names&#039; is the default., string $operator The logical operation to perform. &#039;or&#039; means only one element from the array needs to match; &#039;and&#039; means all elements must match. The default is &#039;and&#039;., ","desc":"Get a list of all registered post type objects."},"register_post_type":{"params":"string $post_type Name of the post type., array|string $args See above description., ","desc":"Register a post type. Do not use before init."},"get_post_type_capabilities":{"params":"object $args Post type registration arguments, ","desc":"Builds an object with all post type capabilities out of a post type object"},"_post_type_meta_capabilities":{"params":"","desc":"Stores or returns a list of post type meta caps for map_meta_cap()."},"get_post_type_labels":{"params":"object $post_type_object , ","desc":"Builds an object with all post type labels out of a post type object"},"_get_custom_object_labels":{"params":"","desc":"Builds an object with custom-something object (post type, taxonomy) labels out of a custom-something object"},"_add_post_type_submenus":{"params":"","desc":"Adds submenus for post types."},"add_post_type_support":{"params":"string $post_type The post type for which to add the feature, string|array $feature the feature being added, can be an array of feature strings or a single string, ","desc":"Register support of certain features for a post type."},"remove_post_type_support":{"params":"string $post_type The post type for which to remove the feature, string $feature The feature being removed, ","desc":"Remove support for a feature from a post type."},"post_type_supports":{"params":"string $post_type The post type being checked, string $feature the feature being checked, ","desc":"Checks a post type&#039;s support for a given feature"},"set_post_type":{"params":"int $post_id Post ID to change post type. Not actually optional., string $post_type Optional, default is post. Supported values are &#039;post&#039; or &#039;page&#039; to name a few., ","desc":"Updates the post type for the post ID."},"get_posts":{"params":"array $args Optional. Overrides defaults., ","desc":"Retrieve list of latest posts or posts matching criteria."},"add_post_meta":{"params":"int $post_id Post ID., string $meta_key Metadata name., mixed $meta_value Metadata value., bool $unique Optional, default is false. Whether the same key should not be added., ","desc":"Add meta data field to a post."},"delete_post_meta":{"params":"int $post_id post ID, string $meta_key Metadata name., mixed $meta_value Optional. Metadata value., ","desc":"Remove metadata matching criteria from a post."},"get_post_meta":{"params":"int $post_id Post ID., string $key The meta key to retrieve., bool $single Whether to return a single value., ","desc":"Retrieve post meta field for a post."},"update_post_meta":{"params":"int $post_id Post ID., string $meta_key Metadata key., mixed $meta_value Metadata value., mixed $prev_value Optional. Previous value to check before removing., ","desc":"Update post meta field based on post ID."},"delete_post_meta_by_key":{"params":"string $post_meta_key Key to search for when deleting., ","desc":"Delete everything from post meta matching meta key."},"get_post_custom":{"params":"int $post_id post ID, ","desc":"Retrieve post meta fields, based on post ID."},"get_post_custom_keys":{"params":"int $post_id post ID, ","desc":"Retrieve meta field names for a post."},"get_post_custom_values":{"params":"string $key Meta field key., int $post_id Post ID, ","desc":"Retrieve values for a custom post field."},"is_sticky":{"params":"int $post_id Optional. Post ID., ","desc":"Check if post is sticky."},"sanitize_post":{"params":"object|array $post The Post Object or Array, string $context Optional, default is &#039;display&#039;. How to sanitize post fields., ","desc":"Sanitize every post field."},"sanitize_post_field":{"params":"string $field The Post Object field name., mixed $value The Post Object value., int $post_id Post ID., string $context How to sanitize post fields. Looks for &#039;raw&#039;, &#039;edit&#039;, &#039;db&#039;, &#039;display&#039;, &#039;attribute&#039; and &#039;js&#039;., ","desc":"Sanitize post field based on context."},"stick_post":{"params":"int $post_id Post ID., ","desc":"Make a post sticky."},"unstick_post":{"params":"int $post_id Post ID., ","desc":"Unstick a post."},"wp_count_posts":{"params":"string $type Optional. Post type to retrieve count, string $perm Optional. &#039;readable&#039; or empty., ","desc":"Count number of posts of a post type and is user has permissions to view."},"wp_count_attachments":{"params":"string|array $mime_type Optional. Array or comma-separated list of MIME patterns., ","desc":"Count number of attachments for the mime type(s)."},"wp_match_mime_types":{"params":"string|array $wildcard_mime_types e.g. audio/mpeg or image (same as image/*) or flash (same as *flash*)., string|array $real_mime_types post_mime_type values, ","desc":"Check a MIME-Type against a list."},"wp_post_mime_type_where":{"params":"string|array $post_mime_types List of mime types or comma separated string of mime types., string $table_alias Optional. Specify a table alias, if needed., ","desc":"Convert MIME types into SQL."},"wp_delete_post":{"params":"int $postid Post ID., bool $force_delete Whether to bypass trash and force deletion. Defaults to false., ","desc":"Trashes or deletes a post or page."},"wp_trash_post":{"params":"int $post_id Post ID., ","desc":"Moves a post or page to the Trash"},"wp_untrash_post":{"params":"int $post_id Post ID., ","desc":"Restores a post or page from the Trash"},"wp_trash_post_comments":{"params":"int $post Post ID or object., ","desc":"Moves comments for a post to the trash"},"wp_untrash_post_comments":{"params":"int $post Post ID or object., ","desc":"Restore comments for a post from the trash"},"wp_get_post_categories":{"params":"int $post_id Optional. The Post ID., array $args Optional. Overwrite the defaults., ","desc":"Retrieve the list of categories for a post."},"wp_get_post_tags":{"params":"int $post_id Optional. The Post ID, array $args Optional. Overwrite the defaults, ","desc":"Retrieve the tags for a post."},"wp_get_post_terms":{"params":"int $post_id Optional. The Post ID, string $taxonomy The taxonomy for which to retrieve terms. Defaults to post_tag., array $args Optional. Overwrite the defaults, ","desc":"Retrieve the terms for a post."},"wp_get_recent_posts":{"params":"string $deprecated Deprecated., array $args Optional. Overrides defaults., string $output Optional., ","desc":"Retrieve number of recent posts."},"wp_get_single_post":{"params":"int $postid Post ID., string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A., ","desc":"Retrieve a single post, based on post ID."},"wp_insert_post":{"params":"array $postarr Elements that make up post to insert., bool $wp_error Optional. Allow return of WP_Error on failure., ","desc":"Insert a post."},"wp_update_post":{"params":"array|object $postarr Post data. Arrays are expected to be escaped, objects are not., ","desc":"Update a post with new post data."},"wp_publish_post":{"params":"int $post_id Post ID., ","desc":"Publish a post by transitioning the post status."},"check_and_publish_future_post":{"params":"int $post_id Post ID., ","desc":"Publish future post and make sure post ID has future post status."},"wp_unique_post_slug":{"params":"string $slug the desired slug (post_name), integer $post_ID , string $post_status no uniqueness checks are made if the post is still draft or pending, string $post_type , integer $post_parent , ","desc":"Computes a unique slug for the post, when given the desired slug and some post details."},"wp_add_post_tags":{"params":"int $post_id Post ID, string $tags The tags to set for the post, separated by commas., ","desc":"Adds tags to a post."},"wp_set_post_tags":{"params":"int $post_id Post ID., string $tags The tags to set for the post, separated by commas., bool $append If true, don&#039;t delete existing tags, just add on. If false, replace the tags with the new tags., ","desc":"Set the tags for a post."},"wp_set_post_terms":{"params":"int $post_id Post ID., string $tags The tags to set for the post, separated by commas., bool $append If true, don&#039;t delete existing tags, just add on. If false, replace the tags with the new tags., ","desc":"Set the terms for a post."},"wp_set_post_categories":{"params":"int $post_ID Post ID., array $post_categories Optional. List of categories., ","desc":"Set categories for a post."},"wp_transition_post_status":{"params":"string $new_status Transition to this post status., string $old_status Previous post status., object $post Post data., ","desc":"Transition the post status of a post."},"add_ping":{"params":"int $post_id Post ID., string $uri Ping URI., ","desc":"Add a URL to those already pung."},"get_enclosed":{"params":"int $post_id Post ID., ","desc":"Retrieve enclosures already enclosed for a post."},"get_pung":{"params":"int $post_id Post ID., ","desc":"Retrieve URLs already pinged for a post."},"get_to_ping":{"params":"int $post_id Post ID, ","desc":"Retrieve URLs that need to be pinged."},"trackback_url_list":{"params":"string $tb_list Comma separated list of URLs, int $post_id Post ID, ","desc":"Do trackbacks for a list of URLs."},"get_all_page_ids":{"params":"","desc":"Get a list of page IDs."},"get_page":{"params":"mixed $page Page object or page ID. Passed by reference., string $output What to output. OBJECT, ARRAY_A, or ARRAY_N., string $filter How the return value should be filtered., ","desc":"Retrieves page data given a page ID or page object."},"get_page_by_path":{"params":"string $page_path Page path, string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT., string $post_type Optional. Post type. Default page., ","desc":"Retrieves a page given its path."},"get_page_by_title":{"params":"string $page_title Page title, string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT., string $post_type Optional. Post type. Default page., ","desc":"Retrieve a page given its title."},"get_page_children":{"params":"int $page_id Page ID., array $pages List of pages&#039; objects., ","desc":"Retrieve child pages from list of pages matching page ID."},"get_page_hierarchy":{"params":"array $pages Posts array., int $page_id Parent page ID., ","desc":"Order the pages with children under parents in a flat list."},"_page_traverse_name":{"params":"","desc":"function to traverse and return all the nested children post names of a root page."},"get_page_uri":{"params":"mixed $page Page object or page ID., ","desc":"Builds URI for a page."},"get_pages":{"params":"mixed $args Optional. Array or string of options that overrides defaults., ","desc":"Retrieve a list of pages."},"is_local_attachment":{"params":"string $url URL to check, ","desc":"Check if the attachment URI is local one and is really an attachment."},"wp_insert_attachment":{"params":"string|array $object Arguments to override defaults., string $file Optional filename., int $parent Parent post ID., ","desc":"Insert an attachment."},"wp_delete_attachment":{"params":"int $post_id Attachment ID., bool $force_delete Whether to bypass trash and force deletion. Defaults to false., ","desc":"Trashes or deletes an attachment."},"wp_get_attachment_metadata":{"params":"int $post_id Attachment ID, bool $unfiltered Optional, default is false. If true, filters are not run., ","desc":"Retrieve attachment meta field for attachment ID."},"wp_update_attachment_metadata":{"params":"int $post_id Attachment ID., array $data Attachment data., ","desc":"Update metadata for an attachment."},"wp_get_attachment_url":{"params":"int $post_id Attachment ID., ","desc":"Retrieve the URL for an attachment."},"wp_get_attachment_thumb_file":{"params":"int $post_id Attachment ID., ","desc":"Retrieve thumbnail for an attachment."},"wp_get_attachment_thumb_url":{"params":"int $post_id Attachment ID, ","desc":"Retrieve URL for an attachment thumbnail."},"wp_attachment_is_image":{"params":"int $post_id Attachment ID, ","desc":"Check if the attachment is an image."},"wp_mime_type_icon":{"params":"string $mime MIME type, ","desc":"Retrieve the icon for a MIME type."},"wp_check_for_changed_slugs":{"params":"int $post_id Post ID., object $post The Post Object, object $post_before The Previous Post Object, ","desc":"Checked for changed slugs for published post objects and save the old slug."},"get_private_posts_cap_sql":{"params":"string $post_type currently only supports &#039;post&#039; or &#039;page&#039;., ","desc":"Retrieve the private post SQL based on capability."},"get_posts_by_author_sql":{"params":"string $post_type Post type., bool $full Optional. Returns a full WHERE statement instead of just an &#039;andalso&#039; term., int $post_author Optional. Query posts having a single author ID., ","desc":"Retrieve the post SQL based on capability, author, and type."},"get_lastpostdate":{"params":"string $timezone The location to get the time. Can be &#039;gmt&#039;, &#039;blog&#039;, or &#039;server&#039;., ","desc":"Retrieve the date that the last post was published."},"get_lastpostmodified":{"params":"string $timezone The location to get the time. Can be &#039;gmt&#039;, &#039;blog&#039;, or &#039;server&#039;., ","desc":"Retrieve last post modified date depending on timezone."},"_get_last_post_time":{"params":"string $timezone The location to get the time. Can be &#039;gmt&#039;, &#039;blog&#039;, or &#039;server&#039;., string $field Field to check. Can be &#039;date&#039; or &#039;modified&#039;., ","desc":"Retrieve latest post date data based on timezone."},"update_post_cache":{"params":"array $posts Array of post objects, ","desc":"Updates posts in cache."},"clean_post_cache":{"params":"int $id The Post ID in the cache to clean, ","desc":"Will clean the post in the cache."},"update_page_cache":{"params":"array $pages list of page objects, ","desc":"Alias of update_post_cache()."},"clean_page_cache":{"params":"int $id Page ID to clean, ","desc":"Will clean the page in the cache."},"update_post_caches":{"params":"array $posts Array of Post objects, string $post_type The post type of the posts in $posts. Default is &#039;post&#039;., bool $update_term_cache Whether to update the term cache. Default is true., bool $update_meta_cache Whether to update the meta cache. Default is true., ","desc":"Call major cache updating functions for list of Post objects."},"update_postmeta_cache":{"params":"array $post_ids List of post IDs., ","desc":"Updates metadata cache for list of post IDs."},"clean_attachment_cache":{"params":"int $id The attachment ID in the cache to clean, bool $clean_terms optional. Whether to clean terms cache, ","desc":"Will clean the attachment in the cache."},"_transition_post_status":{"params":"string $new_status New post status, string $old_status Previous post status, object $post Object type containing the post information, ","desc":"Hook for managing future post transitions to published."},"_future_post_hook":{"params":"int $deprecated Not used. Can be set to null. Never implemented. Not marked as deprecated with _deprecated_argument() as it conflicts with wp_transition_post_status() and the default filter for _future_post_hook()., object $post Object type containing the post information, ","desc":"Hook used to schedule publication for a post marked for the future."},"_publish_post_hook":{"params":"int $post_id The ID in the database table of the post being published, ","desc":"Hook to schedule pings and enclosures when a post is published."},"_save_post_hook":{"params":"int $post_id The ID in the database table for the $post, object $post Object type containing the post information, ","desc":"Hook used to prevent page/post cache and rewrite rules from staying dirty."},"_get_post_ancestors":{"params":"object $_post Post data., ","desc":"Retrieve post ancestors and append to post ancestors property."},"_wp_post_revision_fields":{"params":"array $post Optional a post array to be processed for insertion as a post revision., bool $autosave optional Is the revision an autosave?, ","desc":"Determines which fields of posts are to be saved in revisions."},"wp_save_post_revision":{"params":"int $post_id The ID of the post to save as a revision., ","desc":"Saves an already existing post as a post revision."},"wp_get_post_autosave":{"params":"int $post_id The post ID., ","desc":"Retrieve the autosaved data of the specified post."},"_wp_get_post_autosave_hack":{"params":"object $query WP_Query object, ","desc":"Internally used to hack WP_Query into submission."},"wp_is_post_revision":{"params":"int|object $post Post ID or post object., ","desc":"Determines if the specified post is a revision."},"wp_is_post_autosave":{"params":"int|object $post Post ID or post object., ","desc":"Determines if the specified post is an autosave."},"_wp_put_post_revision":{"params":"int|object|array $post Post ID, post object OR post array., bool $autosave Optional. Is the revision an autosave?, ","desc":"Inserts post data into the posts table as a post revision."},"wp_get_post_revision":{"params":"int|object $post Post ID or post object, string $output Optional. OBJECT, ARRAY_A, or ARRAY_N., string $filter Optional sanitation filter. @see sanitize_post(), ","desc":"Gets a post revision."},"wp_restore_post_revision":{"params":"int|object $revision_id Revision ID or revision object., array $fields Optional. What fields to restore from. Defaults to all., ","desc":"Restores a post to the specified revision."},"wp_delete_post_revision":{"params":"int|object $revision_id Revision ID or revision object., ","desc":"Deletes a revision."},"wp_get_post_revisions":{"params":"int|object $post_id Post ID or post object, ","desc":"Returns all revisions of specified post."},"_set_preview":{"params":"","desc":""},"_show_post_preview":{"params":"","desc":""},"wp_get_post_parent_id":{"params":"int $post_id , ","desc":"Returns the post&#039;s parent&#039;s post_ID"},"wp_check_post_hierarchy_for_loops":{"params":"int $post_parent ID of the parent for the post we&#039;re checking., ","desc":"Checks the given subset of the post hierarchy for hierarchy loops."},"get_post_format_strings":{"params":"","desc":"Returns an array of post format slugs to their translated and pretty display versions"},"get_post_format_slugs":{"params":"","desc":"Retrieves an array of post format slugs."},"get_post_format_string":{"params":"string $slug A post format slug, ","desc":"Returns a pretty, translated version of a post format slug"},"set_post_thumbnail":{"params":"int|object $post Post ID or object where thumbnail should be attached., int $thumbnail_id Thumbnail to attach., ","desc":"Sets a post thumbnail."},"delete_post_thumbnail":{"params":"int|object $post Post ID or object where thumbnail should be removed from., ","desc":"Removes a post thumbnail."},"get_post_format_link":{"params":"string $format Post format, ","desc":"Returns a link to a post format index."},"_post_format_request":{"params":"","desc":"Filters the request to allow for the format prefix."},"_post_format_link":{"params":"","desc":"Filters the post format term link to remove the format prefix."},"_post_format_get_term":{"params":"","desc":"Remove the post format prefix from the name property of the term object created by get_term()."},"_post_format_get_terms":{"params":"","desc":"Remove the post format prefix from the name property of the term objects created by get_terms()."},"_post_format_wp_get_object_terms":{"params":"","desc":"Remove the post format prefix from the name property of the term objects created by wp_get_object_terms()."},"_update_term_count_on_transition_post_status":{"params":"string $new_status , string $old_status , object $post , ","desc":"Update the custom taxonomies&#039; term counts when a post&#039;s status is changed. For example, default posts term counts (for custom taxonomies) don&#039;t include private / draft posts."},"wp_print_scripts":{"params":"","desc":"Prints script tags in document head."},"wp_register_script":{"params":"string $handle Script name, string $src Script url, array $deps (optional) Array of script names on which this script depends, string|bool $ver (optional) Script version (used for cache busting), set to NULL to disable, bool $in_footer (optional) Whether to enqueue the script before &lt;/head&gt; or before &lt;/body&gt;, ","desc":"Register new Javascript file."},"wp_localize_script":{"params":"string $handle The script handle that was registered or used in script-loader, string $object_name Name for the created JS object. This is passed directly so it should be qualified JS variable /[a-zA-Z0-9_]+/, array $l10n Associative PHP array containing the translated strings. HTML entities will be converted and the array will be JSON encoded., ","desc":"Wrapper for $wp_scripts-&gt;localize()."},"wp_deregister_script":{"params":"","desc":"Remove a registered script."},"wp_enqueue_script":{"params":"","desc":"Enqueues script."},"wp_dequeue_script":{"params":"","desc":"Remove an enqueued script."},"wp_script_is":{"params":"string $handle Handle used to add script., string $list Optional, defaults to &#039;queue&#039;. Others values are &#039;registered&#039;, &#039;queue&#039;, &#039;done&#039;, &#039;to_do&#039;, ","desc":"Check whether script has been added to WordPress Scripts."},"wpmu_update_blogs_date":{"params":"","desc":"Update the last_updated field for the current blog."},"get_blogaddress_by_id":{"params":"int $blog_id Blog ID, ","desc":"Get a full blog URL, given a blog id."},"get_blogaddress_by_name":{"params":"string $blogname The (subdomain or directory) name, ","desc":"Get a full blog URL, given a blog name."},"get_blogaddress_by_domain":{"params":"string $domain , string $path , ","desc":"Get a full blog URL, given a domain and a path."},"get_id_from_blogname":{"params":"string $name , ","desc":"Given a blog&#039;s (subdomain or directory) name, retrieve it&#039;s id."},"get_blog_details":{"params":"int|string|array $fields A blog ID, a blog name, or an array of fields to query against., bool $get_all Whether to retrieve all details or only the details in the blogs table. Default is true., ","desc":"Retrieve the details for a blog from the blogs table and blog options."},"refresh_blog_details":{"params":"int $blog_id Blog ID, ","desc":"Clear the blog details cache."},"update_blog_details":{"params":"int $blog_id Blog ID, array $details Array of details keyed by blogs table field names., ","desc":"Update the details for a blog. Updates the blogs table for a given blog id."},"get_blog_option":{"params":"int $blog_id Optional. Blog ID, can be null to refer to the current blog., string $setting Name of option to retrieve. Should already be SQL-escaped., string $default (optional) Default value returned if option not found., ","desc":"Retrieve option value based on setting name and blog_id."},"add_blog_option":{"params":"int $id The blog id, string $key The option key, mixed $value The option value, ","desc":"Add an option for a particular blog."},"delete_blog_option":{"params":"int $id The blog id, string $key The option key, ","desc":"Delete an option for a particular blog."},"update_blog_option":{"params":"int $id The blog id, string $key The option key, mixed $value The option value, ","desc":"Update an option for a particular blog."},"switch_to_blog":{"params":"int $new_blog The id of the blog you want to switch to. Default: current blog, bool $validate Whether to check if $new_blog exists before proceeding, ","desc":"Switch the current blog."},"restore_current_blog":{"params":"","desc":"Restore the current blog, after calling switch_to_blog()"},"is_archived":{"params":"int $id The blog id, ","desc":"Check if a particular blog is archived."},"update_archived":{"params":"int $id The blog id, string $archived The new status, ","desc":"Update the &#039;archived&#039; status of a particular blog."},"update_blog_status":{"params":"int $blog_id BLog ID, string $pref A field name, string $value Value for $pref, ","desc":"Update a blog details field."},"get_blog_status":{"params":"int $id The blog id, string $pref A field name, ","desc":"Get a blog details field."},"get_last_updated":{"params":"mixed $deprecated Not used, int $start The offset, int $quantity The maximum number of blogs to retrieve. Default is 40., ","desc":"Get a list of most recently updated blogs."},"_update_blog_date_on_post_publish":{"params":"string $new_status The new post status, string $old_status The old post status, object $post Post object, ","desc":"Handler for updating the blog date when a post is published or an already published post is changed."},"get_header":{"params":"string $name The name of the specialised header., ","desc":"Load header template."},"get_footer":{"params":"string $name The name of the specialised footer., ","desc":"Load footer template."},"get_sidebar":{"params":"string $name The name of the specialised sidebar., ","desc":"Load sidebar template."},"get_template_part":{"params":"string $slug The slug name for the generic template., string $name The name of the specialised template., ","desc":"Load a template part into a template"},"get_search_form":{"params":"boolean $echo Default to echo and not return the form., ","desc":"Display search form."},"wp_loginout":{"params":"string $redirect Optional path to redirect to on login/logout., boolean $echo Default to echo and not return the link., ","desc":"Display the Log In/Out link."},"wp_logout_url":{"params":"string $redirect Path to redirect to on logout., ","desc":"Returns the Log Out URL."},"wp_login_url":{"params":"string $redirect Path to redirect to on login., bool $force_reauth Whether to force reauthorization, even if a cookie is present. Default is false., ","desc":"Returns the Log In URL."},"wp_login_form":{"params":"array $args Configuration options to modify the form output, ","desc":"Provides a simple login form for use anywhere within WordPress. By default, it echoes the HTML immediately. Pass array(&#039;echo&#039;=&gt;false) to return the string instead."},"wp_lostpassword_url":{"params":"string $redirect Path to redirect to on login., ","desc":"Returns the Lost Password URL."},"wp_register":{"params":"string $before Text to output before the link (defaults to &lt;li&gt;)., string $after Text to output after the link (defaults to &lt;/li&gt;)., boolean $echo Default to echo and not return the link., ","desc":"Display the Registration or Admin link."},"wp_meta":{"params":"","desc":"Theme container function for the &#039;wp_meta&#039; action."},"bloginfo":{"params":"string $show What to display., ","desc":"Display information about the blog."},"get_bloginfo":{"params":"string $show Blog info to retrieve., string $filter How to filter what is retrieved., ","desc":"Retrieve information about the blog."},"get_current_blog_id":{"params":"","desc":"Retrieve the current blog id"},"wp_title":{"params":"string $sep Optional, default is &#039;&amp;raquo;&#039;. How to separate the various items within the page title., bool $display Optional, default is true. Whether to display or retrieve title., string $seplocation Optional. Direction to display title, &#039;right&#039;., ","desc":"Display or retrieve page title for all areas of blog."},"single_post_title":{"params":"string $prefix Optional. What to display before the title., bool $display Optional, default is true. Whether to display or retrieve title., ","desc":"Display or retrieve page title for post."},"post_type_archive_title":{"params":"string $prefix Optional. What to display before the title., bool $display Optional, default is true. Whether to display or retrieve title., ","desc":"Display or retrieve title for a post type archive."},"single_cat_title":{"params":"string $prefix Optional. What to display before the title., bool $display Optional, default is true. Whether to display or retrieve title., ","desc":"Display or retrieve page title for category archive."},"single_tag_title":{"params":"string $prefix Optional. What to display before the title., bool $display Optional, default is true. Whether to display or retrieve title., ","desc":"Display or retrieve page title for tag post archive."},"single_term_title":{"params":"string $prefix Optional. What to display before the title., bool $display Optional, default is true. Whether to display or retrieve title., ","desc":"Display or retrieve page title for taxonomy term archive."},"single_month_title":{"params":"string $prefix Optional. What to display before the title., bool $display Optional, default is true. Whether to display or retrieve title., ","desc":"Display or retrieve page title for post archive based on date."},"get_archives_link":{"params":"string $url URL to archive., string $text Archive text description., string $format Optional, default is &#039;html&#039;. Can be &#039;link&#039;, &#039;option&#039;, &#039;html&#039;, or custom., string $before Optional., string $after Optional., ","desc":"Retrieve archive link content based on predefined or custom code."},"wp_get_archives":{"params":"string|array $args Optional. Override defaults., ","desc":"Display archive links based on type and format."},"calendar_week_mod":{"params":"int $num Number of day., ","desc":"Get number of days since the start of the week."},"get_calendar":{"params":"bool $initial Optional, default is true. Use initial calendar names., bool $echo Optional, default is true. Set to false for return., ","desc":"Display calendar with days that have posts as links."},"delete_get_calendar_cache":{"params":"","desc":"Purge the cached results of get_calendar."},"allowed_tags":{"params":"","desc":"Display all of the allowed tags in HTML format with attributes."},"the_date_xml":{"params":"","desc":"Outputs the date in iso8601 format for xml files."},"the_date":{"params":"string $d Optional. PHP date format defaults to the date_format option if not specified., string $before Optional. Output before the date., string $after Optional. Output after the date., bool $echo Optional, default is display. Whether to echo the date or return it., ","desc":"Display or Retrieve the date the current $post was written (once per date)"},"get_the_date":{"params":"string $d Optional. PHP date format defaults to the date_format option if not specified., ","desc":"Retrieve the date the current $post was written."},"the_modified_date":{"params":"string $d Optional. PHP date format defaults to the date_format option if not specified., string $before Optional. Output before the date., string $after Optional. Output after the date., bool $echo Optional, default is display. Whether to echo the date or return it., ","desc":"Display the date on which the post was last modified."},"get_the_modified_date":{"params":"string $d Optional. PHP date format. Defaults to the &quot;date_format&quot; option, ","desc":"Retrieve the date on which the post was last modified."},"the_time":{"params":"string $d Either &#039;G&#039;, &#039;U&#039;, or php date format., ","desc":"Display the time at which the post was written."},"get_the_time":{"params":"string $d Optional Either &#039;G&#039;, &#039;U&#039;, or php date format defaults to the value specified in the time_format option., int|object $post Optional post ID or object. Default is global $post object., ","desc":"Retrieve the time at which the post was written."},"get_post_time":{"params":"string $d Optional Either &#039;G&#039;, &#039;U&#039;, or php date format., bool $gmt Optional, default is false. Whether to return the gmt time., int|object $post Optional post ID or object. Default is global $post object., bool $translate Whether to translate the time string, ","desc":"Retrieve the time at which the post was written."},"the_modified_time":{"params":"string $d Optional Either &#039;G&#039;, &#039;U&#039;, or php date format defaults to the value specified in the time_format option., ","desc":"Display the time at which the post was last modified."},"get_the_modified_time":{"params":"string $d Optional Either &#039;G&#039;, &#039;U&#039;, or php date format defaults to the value specified in the time_format option., ","desc":"Retrieve the time at which the post was last modified."},"get_post_modified_time":{"params":"string $d Optional, default is &#039;U&#039;. Either &#039;G&#039;, &#039;U&#039;, or php date format., bool $gmt Optional, default is false. Whether to return the gmt time., int|object $post Optional, default is global post object. A post_id or post object, bool $translate Optional, default is false. Whether to translate the result, ","desc":"Retrieve the time at which the post was last modified."},"the_weekday":{"params":"","desc":"Display the weekday on which the post was written."},"the_weekday_date":{"params":"string $before Optional Output before the date., string $after Optional Output after the date., ","desc":"Display the weekday on which the post was written."},"wp_head":{"params":"","desc":"Fire the wp_head action"},"wp_footer":{"params":"","desc":"Fire the wp_footer action"},"feed_links":{"params":"array $args Optional arguments., ","desc":"Display the links to the general feeds."},"feed_links_extra":{"params":"array $args Optional arguments., ","desc":"Display the links to the extra feeds such as category feeds."},"rsd_link":{"params":"","desc":"Display the link to the Really Simple Discovery service endpoint."},"wlwmanifest_link":{"params":"","desc":"Display the link to the Windows Live Writer manifest file."},"noindex":{"params":"","desc":"Display a noindex meta tag if required by the blog configuration."},"wp_no_robots":{"params":"","desc":"Display a noindex meta tag."},"rich_edit_exists":{"params":"","desc":"Determine if TinyMCE is available."},"user_can_richedit":{"params":"","desc":"Whether the user should have a WYSIWIG editor."},"wp_default_editor":{"params":"","desc":"Find out which editor should be displayed by default."},"wp_editor":{"params":"string $content Initial content for the editor., string $editor_id HTML ID attribute value for the textarea and TinyMCE. Can only be /[a-z]+/., array $settings See _WP_Editors::editor()., ","desc":"Renders an editor."},"get_search_query":{"params":"bool $escaped Whether the result is escaped. Default true. Only use when you are later escaping it. Do not use unescaped., ","desc":"Retrieve the contents of the search WordPress query variable."},"the_search_query":{"params":"","desc":"Display the contents of the search query variable."},"language_attributes":{"params":"string $doctype The type of html document (xhtml|html)., ","desc":"Display the language attributes for the html tag."},"paginate_links":{"params":"string|array $args Optional. Override defaults., ","desc":"Retrieve paginated link for archive post pages."},"wp_admin_css_color":{"params":"string $key The unique key for this theme., string $name The name of the theme., string $url The url of the css file containing the colour scheme., array $colors Optional An array of CSS color definitions which are used to give the user a feel for the theme., ","desc":"Registers an admin colour scheme css file."},"register_admin_color_schemes":{"params":"","desc":"Registers the default Admin color schemes"},"wp_admin_css_uri":{"params":"string $file file relative to wp-admin/ without its &quot;.css&quot; extension., ","desc":"Display the URL of a WordPress admin CSS file."},"wp_admin_css":{"params":"string $file Optional. Style handle name or file name (without &quot;.css&quot; extension) relative to wp-admin/. Defaults to &#039;wp-admin&#039;., bool $force_echo Optional. Force the stylesheet link to be printed rather than enqueued., ","desc":"Enqueues or directly prints a stylesheet link to the specified CSS file."},"add_thickbox":{"params":"","desc":"Enqueues the default ThickBox js and css."},"wp_generator":{"params":"","desc":"Display the XHTML generator that is generated on the wp_head hook."},"the_generator":{"params":"string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export)., ","desc":"Display the generator XML or Comment for RSS, ATOM, etc."},"get_the_generator":{"params":"string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export)., ","desc":"Creates the generator XML or Comment for RSS, ATOM, etc."},"checked":{"params":"mixed $checked One of the values to compare, mixed $current (true) The other value to compare if not just true, bool $echo Whether to echo or just return the string, ","desc":"Outputs the html checked attribute."},"selected":{"params":"mixed $selected One of the values to compare, mixed $current (true) The other value to compare if not just true, bool $echo Whether to echo or just return the string, ","desc":"Outputs the html selected attribute."},"disabled":{"params":"mixed $disabled One of the values to compare, mixed $current (true) The other value to compare if not just true, bool $echo Whether to echo or just return the string, ","desc":"Outputs the html disabled attribute."},"__checked_selected_helper":{"params":"any $helper One of the values to compare, any $current (true) The other value to compare if not just true, bool $echo Whether to echo or just return the string, string $type The type of checked|selected|disabled we are doing, ","desc":"Private helper function for checked, selected, and disabled."},"add_shortcode":{"params":"string $tag Shortcode tag to be searched in post content., callable $func Hook to run when shortcode is found., ","desc":"Add hook for shortcode tag."},"remove_shortcode":{"params":"string $tag shortcode tag to remove hook for., ","desc":"Removes hook for shortcode."},"remove_all_shortcodes":{"params":"","desc":"Clear all shortcodes."},"do_shortcode":{"params":"string $content Content to search for shortcodes, ","desc":"Search content for shortcodes and filter shortcodes through their hooks."},"get_shortcode_regex":{"params":"","desc":"Retrieve the shortcode regular expression for searching."},"do_shortcode_tag":{"params":"array $m Regular expression match array, ","desc":"Regular Expression callable for do_shortcode() for calling shortcode hook."},"shortcode_parse_atts":{"params":"string $text , ","desc":"Retrieve all attributes from the shortcodes tag."},"shortcode_atts":{"params":"array $pairs Entire list of supported attributes and their defaults., array $atts User defined attributes in shortcode tag., ","desc":"Combine user attributes with known attributes and fill in defaults when needed."},"strip_shortcodes":{"params":"string $content Content to remove shortcode tags., ","desc":"Remove all shortcode tags from the given content."},"strip_shortcode_tag":{"params":"","desc":""},"get_the_author":{"params":"string $deprecated Deprecated., ","desc":"Retrieve the author of the current post."},"the_author":{"params":"string $deprecated Deprecated., string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it., ","desc":"Display the name of the author of the current post."},"get_the_modified_author":{"params":"","desc":"Retrieve the author who last edited the current post."},"the_modified_author":{"params":"","desc":"Display the name of the author who last edited the current post."},"get_the_author_meta":{"params":"string $field selects the field of the users record., int $user_id Optional. User ID., ","desc":"Retrieve the requested data of the author of the current post."},"the_author_meta":{"params":"string $field selects the field of the users record., int $user_id Optional. User ID., ","desc":"Retrieve the requested data of the author of the current post."},"get_the_author_link":{"params":"","desc":"Retrieve either author&#039;s link or author&#039;s name."},"the_author_link":{"params":"","desc":"Display either author&#039;s link or author&#039;s name."},"get_the_author_posts":{"params":"","desc":"Retrieve the number of posts by the author of the current post."},"the_author_posts":{"params":"","desc":"Display the number of posts by the author of the current post."},"the_author_posts_link":{"params":"string $deprecated Deprecated., ","desc":"Display an HTML link to the author page of the author of the current post."},"get_author_posts_url":{"params":"","desc":"Retrieve the URL to the author page for the user with the ID provided."},"wp_list_authors":{"params":"array $args The argument array., ","desc":"List all the authors of the blog, with several options available."},"is_multi_author":{"params":"","desc":"Does this site have more than one author"},"__clear_multi_author_cache":{"params":"","desc":"Helper function to clear the cache for number of authors."},"the_permalink":{"params":"","desc":"Display the permalink for the current post."},"user_trailingslashit":{"params":"string $string URL with or without a trailing slash., string $type_of_url The type of URL being considered (e.g. single, category, etc) for use in the filter., ","desc":"Retrieve trailing slash string, if blog set for adding trailing slashes."},"permalink_anchor":{"params":"string $mode Permalink mode can be either &#039;title&#039;, &#039;id&#039;, or default, which is &#039;id&#039;., ","desc":"Display permalink anchor for current post."},"get_permalink":{"params":"int $id Optional. Post ID., bool $leavename Optional, defaults to false. Whether to keep post name or page name., ","desc":"Retrieve full permalink for current post or post ID."},"get_post_permalink":{"params":"int $id Optional. Post ID., bool $leavename Optional, defaults to false. Whether to keep post name., bool $sample Optional, defaults to false. Is it a sample permalink., ","desc":"Retrieve the permalink for a post with a custom post type."},"post_permalink":{"params":"int $post_id Optional. Post ID., mixed $deprecated Not used., ","desc":"Retrieve permalink from post ID."},"get_page_link":{"params":"int $id Optional. Post ID., bool $leavename Optional, defaults to false. Whether to keep page name., bool $sample Optional, defaults to false. Is it a sample permalink., ","desc":"Retrieve the permalink for current page or page ID."},"_get_page_link":{"params":"int $id Optional. Post ID., bool $leavename Optional. Leave name., bool $sample Optional. Sample permalink., ","desc":"Retrieve the page permalink."},"get_attachment_link":{"params":"int $id Optional. Post ID., ","desc":"Retrieve permalink for attachment."},"get_year_link":{"params":"int|bool $year False for current year or year for permalink., ","desc":"Retrieve the permalink for the year archives."},"get_month_link":{"params":"bool|int $year False for current year. Integer of year., bool|int $month False for current month. Integer of month., ","desc":"Retrieve the permalink for the month archives with year."},"get_day_link":{"params":"bool|int $year False for current year. Integer of year., bool|int $month False for current month. Integer of month., bool|int $day False for current day. Integer of day., ","desc":"Retrieve the permalink for the day archives with year and month."},"the_feed_link":{"params":"string $anchor The link&#039;s anchor text., string $feed Optional, defaults to default feed. Feed type., ","desc":"Display the permalink for the feed type."},"get_feed_link":{"params":"string $feed Optional, defaults to default feed. Feed type., ","desc":"Retrieve the permalink for the feed type."},"get_post_comments_feed_link":{"params":"int $post_id Optional. Post ID., string $feed Optional. Feed type., ","desc":"Retrieve the permalink for the post comments feed."},"post_comments_feed_link":{"params":"string $link_text Descriptive text., int $post_id Optional post ID. Default to current post., string $feed Optional. Feed format., ","desc":"Display the comment feed link for a post."},"get_author_feed_link":{"params":"int $author_id ID of an author., string $feed Optional. Feed type., ","desc":"Retrieve the feed link for a given author."},"get_category_feed_link":{"params":"int $cat_id ID of a category., string $feed Optional. Feed type., ","desc":"Retrieve the feed link for a category."},"get_term_feed_link":{"params":"int $term_id ID of a category., string $taxonomy Optional. Taxonomy of $term_id, string $feed Optional. Feed type., ","desc":"Retrieve the feed link for a term."},"get_tag_feed_link":{"params":"int $tag_id Tag ID., string $feed Optional. Feed type., ","desc":"Retrieve permalink for feed of tag."},"get_edit_tag_link":{"params":"int $tag_id Tag ID, string $taxonomy Taxonomy, ","desc":"Retrieve edit tag link."},"edit_tag_link":{"params":"string $link Optional. Anchor text., string $before Optional. Display before edit link., string $after Optional. Display after edit link., int|object $tag Tag object or ID, ","desc":"Display or retrieve edit tag link with formatting."},"get_edit_term_link":{"params":"int $term_id Term ID, string $taxonomy Taxonomy, string $object_type The object type, ","desc":"Retrieve edit term url."},"edit_term_link":{"params":"string $link Optional. Anchor text., string $before Optional. Display before edit link., string $after Optional. Display after edit link., object $term Term object, ","desc":"Display or retrieve edit term link with formatting."},"get_search_link":{"params":"string $query Optional. The query string to use. If empty the current query is used., ","desc":"Retrieve permalink for search."},"get_search_feed_link":{"params":"string $search_query Optional. Search query., string $feed Optional. Feed type., ","desc":"Retrieve the permalink for the feed of the search results."},"get_search_comments_feed_link":{"params":"string $search_query Optional. Search query., string $feed Optional. Feed type., ","desc":"Retrieve the permalink for the comments feed of the search results."},"get_post_type_archive_link":{"params":"string $post_type Post type, ","desc":"Retrieve the permalink for a post type archive."},"get_post_type_archive_feed_link":{"params":"string $post_type Post type, string $feed Optional. Feed type, ","desc":"Retrieve the permalink for a post type archive feed."},"get_edit_post_link":{"params":"int $id Optional. Post ID., string $context Optional, defaults to display. How to write the &#039;&amp;&#039;, defaults to &#039;&amp;amp;&#039;., ","desc":"Retrieve edit posts link for post."},"edit_post_link":{"params":"string $link Optional. Anchor text., string $before Optional. Display before edit link., string $after Optional. Display after edit link., int $id Optional. Post ID., ","desc":"Display edit post link for post."},"get_delete_post_link":{"params":"int $id Optional. Post ID., string $deprecated Not used., bool $force_delete Whether to bypass trash and force deletion. Default is false., ","desc":"Retrieve delete posts link for post."},"get_edit_comment_link":{"params":"int $comment_id Optional. Comment ID., ","desc":"Retrieve edit comment link."},"edit_comment_link":{"params":"string $link Optional. Anchor text., string $before Optional. Display before edit link., string $after Optional. Display after edit link., ","desc":"Display or retrieve edit comment link with formatting."},"get_edit_bookmark_link":{"params":"int $link Optional. Bookmark ID., ","desc":"Display edit bookmark (literally a URL external to blog) link."},"edit_bookmark_link":{"params":"string $link Optional. Anchor text., string $before Optional. Display before edit link., string $after Optional. Display after edit link., int $bookmark Optional. Bookmark ID., ","desc":"Display edit bookmark (literally a URL external to blog) link anchor content."},"get_previous_post":{"params":"bool $in_same_cat Optional. Whether post should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., ","desc":"Retrieve previous post that is adjacent to current post."},"get_next_post":{"params":"bool $in_same_cat Optional. Whether post should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., ","desc":"Retrieve next post that is adjacent to current post."},"get_adjacent_post":{"params":"bool $in_same_cat Optional. Whether post should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., bool $previous Optional. Whether to retrieve previous post., ","desc":"Retrieve adjacent post."},"get_adjacent_post_rel_link":{"params":"string $title Optional. Link title format., bool $in_same_cat Optional. Whether link should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., bool $previous Optional, default is true. Whether to display link to previous or next post., ","desc":"Get adjacent post relational link."},"adjacent_posts_rel_link":{"params":"string $title Optional. Link title format., bool $in_same_cat Optional. Whether link should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., ","desc":"Display relational links for the posts adjacent to the current post."},"adjacent_posts_rel_link_wp_head":{"params":"","desc":"Display relational links for the posts adjacent to the current post for single post pages."},"next_post_rel_link":{"params":"string $title Optional. Link title format., bool $in_same_cat Optional. Whether link should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., ","desc":"Display relational link for the next post adjacent to the current post."},"prev_post_rel_link":{"params":"string $title Optional. Link title format., bool $in_same_cat Optional. Whether link should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., ","desc":"Display relational link for the previous post adjacent to the current post."},"get_boundary_post":{"params":"bool $in_same_cat Optional. Whether returned post should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., bool $start Optional. Whether to retrieve first or last post., ","desc":"Retrieve boundary post."},"previous_post_link":{"params":"string $format Optional. Link anchor format., string $link Optional. Link permalink format., bool $in_same_cat Optional. Whether link should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., ","desc":"Display previous post link that is adjacent to the current post."},"next_post_link":{"params":"string $format Optional. Link anchor format., string $link Optional. Link permalink format., bool $in_same_cat Optional. Whether link should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., ","desc":"Display next post link that is adjacent to the current post."},"adjacent_post_link":{"params":"string $format Link anchor format., string $link Link permalink format., bool $in_same_cat Optional. Whether link should be in a same category., array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs., bool $previous Optional, default is true. Whether to display link to previous or next post., ","desc":"Display adjacent post link."},"get_pagenum_link":{"params":"int $pagenum Optional. Page ID., ","desc":"Retrieve links for page numbers."},"get_next_posts_page_link":{"params":"int $max_page Optional. Max pages., ","desc":"Retrieve next posts page link."},"next_posts":{"params":"int $max_page Optional. Max pages., boolean $echo Optional. Echo or return;, ","desc":"Display or return the next posts page link."},"get_next_posts_link":{"params":"string $label Content for link text., int $max_page Optional. Max pages., ","desc":"Return the next posts page link."},"next_posts_link":{"params":"string $label Content for link text., int $max_page Optional. Max pages., ","desc":"Display the next posts page link."},"get_previous_posts_page_link":{"params":"","desc":"Retrieve previous posts page link."},"previous_posts":{"params":"boolean $echo Optional. Echo or return;, ","desc":"Display or return the previous posts page link."},"get_previous_posts_link":{"params":"string $label Optional. Previous page link text., ","desc":"Return the previous posts page link."},"previous_posts_link":{"params":"string $label Optional. Previous page link text., ","desc":"Display the previous posts page link."},"get_posts_nav_link":{"params":"string|array $args Optional args., ","desc":"Return post pages link navigation for previous and next pages."},"posts_nav_link":{"params":"string $sep Optional. Separator for posts navigation links., string $prelabel Optional. Label for previous pages., string $nxtlabel Optional Label for next pages., ","desc":"Display post pages link navigation for previous and next pages."},"get_comments_pagenum_link":{"params":"int $pagenum Optional. Page number., ","desc":"Retrieve comments page number link."},"get_next_comments_link":{"params":"string $label Optional. Label for link text., int $max_page Optional. Max page., ","desc":"Return the link to next comments page."},"next_comments_link":{"params":"string $label Optional. Label for link text., int $max_page Optional. Max page., ","desc":"Display the link to next comments page."},"get_previous_comments_link":{"params":"string $label Optional. Label for comments link text., ","desc":"Return the previous comments page link."},"previous_comments_link":{"params":"string $label Optional. Label for comments link text., ","desc":"Display the previous comments page link."},"paginate_comments_links":{"params":"string|array $args Optional args. See paginate_links()., ","desc":"Create pagination links for the comments on the current post."},"get_shortcut_link":{"params":"","desc":"Retrieve shortcut link."},"home_url":{"params":"string $path (optional) Path relative to the home url., string $scheme (optional) Scheme to give the home url context. Currently &#039;http&#039;, &#039;https&#039;., ","desc":"Retrieve the home url for the current site."},"get_home_url":{"params":"int $blog_id (optional) Blog ID. Defaults to current blog., string $path (optional) Path relative to the home url., string $scheme (optional) Scheme to give the home url context. Currently &#039;http&#039;, &#039;https&#039;., ","desc":"Retrieve the home url for a given site."},"site_url":{"params":"string $path Optional. Path relative to the site url., string $scheme Optional. Scheme to give the site url context. Currently &#039;http&#039;, &#039;https&#039;, &#039;login&#039;, &#039;login_post&#039;, or &#039;admin&#039;., ","desc":"Retrieve the site url for the current site."},"get_site_url":{"params":"int $blog_id (optional) Blog ID. Defaults to current blog., string $path Optional. Path relative to the site url., string $scheme Optional. Scheme to give the site url context. Currently &#039;http&#039;, &#039;https&#039;, &#039;login&#039;, &#039;login_post&#039;, or &#039;admin&#039;., ","desc":"Retrieve the site url for a given site."},"admin_url":{"params":"string $path Optional path relative to the admin url., string $scheme The scheme to use. Default is &#039;admin&#039;, which obeys force_ssl_admin() and is_ssl(). &#039;http&#039; or &#039;https&#039; can be passed to force those schemes., ","desc":"Retrieve the url to the admin area for the current site."},"get_admin_url":{"params":"int $blog_id (optional) Blog ID. Defaults to current blog., string $path Optional path relative to the admin url., string $scheme The scheme to use. Default is &#039;admin&#039;, which obeys force_ssl_admin() and is_ssl(). &#039;http&#039; or &#039;https&#039; can be passed to force those schemes., ","desc":"Retrieve the url to the admin area for a given site."},"includes_url":{"params":"string $path Optional. Path relative to the includes url., ","desc":"Retrieve the url to the includes directory."},"content_url":{"params":"string $path Optional. Path relative to the content url., ","desc":"Retrieve the url to the content directory."},"plugins_url":{"params":"string $path Optional. Path relative to the plugins url., string $plugin Optional. The plugin file that you want to be relative to - i.e. pass in __FILE__, ","desc":"Retrieve the url to the plugins directory or to a specific file within that directory."},"network_site_url":{"params":"string $path Optional. Path relative to the site url., string $scheme Optional. Scheme to give the site url context. Currently &#039;http&#039;, &#039;https&#039;, &#039;login&#039;, &#039;login_post&#039;, or &#039;admin&#039;., ","desc":"Retrieve the site url for the current network."},"network_home_url":{"params":"string $path (optional) Path relative to the home url., string $scheme (optional) Scheme to give the home url context. Currently &#039;http&#039;, &#039;https&#039;., ","desc":"Retrieve the home url for the current network."},"network_admin_url":{"params":"string $path Optional path relative to the admin url., string $scheme The scheme to use. Default is &#039;admin&#039;, which obeys force_ssl_admin() and is_ssl(). &#039;http&#039; or &#039;https&#039; can be passed to force those schemes., ","desc":"Retrieve the url to the admin area for the network."},"user_admin_url":{"params":"string $path Optional path relative to the admin url., string $scheme The scheme to use. Default is &#039;admin&#039;, which obeys force_ssl_admin() and is_ssl(). &#039;http&#039; or &#039;https&#039; can be passed to force those schemes., ","desc":"Retrieve the url to the admin area for the current user."},"self_admin_url":{"params":"string $path Optional path relative to the admin url., string $scheme The scheme to use. Default is &#039;admin&#039;, which obeys force_ssl_admin() and is_ssl(). &#039;http&#039; or &#039;https&#039; can be passed to force those schemes., ","desc":"Retrieve the url to the admin area for either the current blog or the network depending on context."},"get_dashboard_url":{"params":"int $user_id User ID, string $path Optional path relative to the dashboard. Use only paths known to both blog and user admins., string $scheme The scheme to use. Default is &#039;admin&#039;, which obeys force_ssl_admin() and is_ssl(). &#039;http&#039; or &#039;https&#039; can be passed to force those schemes., ","desc":"Get the URL to the user&#039;s dashboard."},"get_edit_profile_url":{"params":"int $user User ID, string $scheme The scheme to use. Default is &#039;admin&#039;, which obeys force_ssl_admin() and is_ssl(). &#039;http&#039; or &#039;https&#039; can be passed to force those schemes., ","desc":"Get the URL to the user&#039;s profile editor."},"rel_canonical":{"params":"","desc":"Output rel=canonical for singular queries."},"wp_get_shortlink":{"params":"int $id A post or blog id. Default is 0, which means the current post or blog., string $context Whether the id is a &#039;blog&#039; id, &#039;post&#039; id, or &#039;media&#039; id. If &#039;post&#039;, the post_type of the post is consulted. If &#039;query&#039;, the current query is consulted to determine the id and context. Default is &#039;post&#039;., bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this., ","desc":"Return a shortlink for a post, page, attachment, or blog."},"wp_shortlink_wp_head":{"params":"","desc":"Inject rel=shortlink into head if a shortlink is defined for the current page."},"wp_shortlink_header":{"params":"","desc":"Send a Link: rel=shortlink header if a shortlink is defined for the current page."},"the_shortlink":{"params":"string $text Optional The link text or HTML to be displayed. Defaults to &#039;This is the short link.&#039;, string $title Optional The tooltip for the link. Must be sanitized. Defaults to the sanitized post title., string $before Optional HTML to display before the link., string $after Optional HTML to display after the link., ","desc":"Display the Short Link for a Post"},"create_initial_taxonomies":{"params":"","desc":"Creates the initial taxonomies when &#039;init&#039; action is fired."},"get_taxonomies":{"params":"array $args An array of key =&gt; value arguments to match against the taxonomy objects., string $output The type of output to return, either taxonomy &#039;names&#039; or &#039;objects&#039;. &#039;names&#039; is the default., string $operator The logical operation to perform. &#039;or&#039; means only one element from the array needs to match; &#039;and&#039; means all elements must match. The default is &#039;and&#039;., ","desc":"Get a list of registered taxonomy objects."},"get_object_taxonomies":{"params":"array|string|object $object Name of the type of taxonomy object, or an object (row from posts), string $output The type of output to return, either taxonomy &#039;names&#039; or &#039;objects&#039;. &#039;names&#039; is the default., ","desc":"Return all of the taxonomy names that are of $object_type."},"get_taxonomy":{"params":"string $taxonomy Name of taxonomy object to return, ","desc":"Retrieves the taxonomy object of $taxonomy."},"taxonomy_exists":{"params":"string $taxonomy Name of taxonomy object, ","desc":"Checks that the taxonomy name exists."},"is_taxonomy_hierarchical":{"params":"string $taxonomy Name of taxonomy object, ","desc":"Whether the taxonomy object is hierarchical."},"register_taxonomy":{"params":"string $taxonomy Name of taxonomy object, array|string $object_type Name of the object type for the taxonomy object., array|string $args See above description for the two keys values., ","desc":"Create or modify a taxonomy object. Do not use before init."},"get_taxonomy_labels":{"params":"object $tax Taxonomy object, ","desc":"Builds an object with all taxonomy labels out of a taxonomy object"},"register_taxonomy_for_object_type":{"params":"string $taxonomy Name of taxonomy object, array|string $object_type Name of the object type, ","desc":"Add an already registered taxonomy to an object type."},"get_objects_in_term":{"params":"int|array $term_ids Term id or array of term ids of terms that will be used, string|array $taxonomies String of taxonomy name or Array of string values of taxonomy names, array|string $args Change the order of the object_ids, either ASC or DESC, ","desc":"Retrieve object_ids of valid taxonomy and term."},"get_tax_sql":{"params":"array $tax_query A compact tax query, string $primary_table , string $primary_id_column , ","desc":"Given a taxonomy query, generates SQL to be appended to a main query."},"get_term":{"params":"int|object $term If integer, will get from database. If object will apply filters and return $term., string $taxonomy Taxonomy name that $term is part of., string $output Constant OBJECT, ARRAY_A, or ARRAY_N, string $filter Optional, default is raw or no WordPress defined filter will applied., ","desc":"Get all Term data from database by Term ID."},"get_term_by":{"params":"string $field Either &#039;slug&#039;, &#039;name&#039;, or &#039;id&#039;, string|int $value Search for this term value, string $taxonomy Taxonomy Name, string $output Constant OBJECT, ARRAY_A, or ARRAY_N, string $filter Optional, default is raw or no WordPress defined filter will applied., ","desc":"Get all Term data from database by Term field and data."},"get_term_children":{"params":"string $term_id ID of Term to get children, string $taxonomy Taxonomy Name, ","desc":"Merge all term children into a single array of their IDs."},"get_term_field":{"params":"string $field Term field to fetch, int $term Term ID, string $taxonomy Taxonomy Name, string $context Optional, default is display. Look at sanitize_term_field() for available options., ","desc":"Get sanitized Term field."},"get_term_to_edit":{"params":"int|object $id Term ID or Object, string $taxonomy Taxonomy Name, ","desc":"Sanitizes Term for editing."},"get_terms":{"params":"string|array $taxonomies Taxonomy name or list of Taxonomy names, string|array $args The values of what to search for when returning terms, ","desc":"Retrieve the terms in a given taxonomy or list of taxonomies."},"term_exists":{"params":"int|string $term The term to check, string $taxonomy The taxonomy name to use, int $parent ID of parent term under which to confine the exists search., ","desc":"Check if Term exists."},"sanitize_term":{"params":"array|object $term The term to check, string $taxonomy The taxonomy name to use, string $context Default is &#039;display&#039;., ","desc":"Sanitize Term all fields."},"sanitize_term_field":{"params":"string $field Term field to sanitize, string $value Search for this term value, int $term_id Term ID, string $taxonomy Taxonomy Name, string $context Either edit, db, display, attribute, or js., ","desc":"Cleanse the field value in the term based on the context."},"wp_count_terms":{"params":"string $taxonomy Taxonomy name, array|string $args Overwrite defaults. See get_terms(), ","desc":"Count how many terms are in Taxonomy."},"wp_delete_object_term_relationships":{"params":"int $object_id The term Object Id that refers to the term, string|array $taxonomies List of Taxonomy Names or single Taxonomy name., ","desc":"Will unlink the object from the taxonomy or taxonomies."},"wp_delete_term":{"params":"int $term Term ID, string $taxonomy Taxonomy Name, array|string $args Optional. Change &#039;default&#039; term id and override found term ids., ","desc":"Removes a term from the database."},"wp_delete_category":{"params":"int $cat_ID , ","desc":"Deletes one existing category."},"wp_get_object_terms":{"params":"int|array $object_ids The ID(s) of the object(s) to retrieve., string|array $taxonomies The taxonomies to retrieve terms from., array|string $args Change what is returned, ","desc":"Retrieves the terms associated with the given object(s), in the supplied taxonomies."},"wp_insert_term":{"params":"string $term The term to add or update., string $taxonomy The taxonomy to which to add the term, array|string $args Change the values of the inserted term, ","desc":"Adds a new term to the database. Optionally marks it as an alias of an existing term."},"wp_set_object_terms":{"params":"int $object_id The object to relate to., array|int|string $terms The slug or id of the term, will replace all existing related terms in this taxonomy., array|string $taxonomy The context in which to relate the term to the object., bool $append If false will delete difference of terms., ","desc":"Create Term and Taxonomy Relationships."},"wp_unique_term_slug":{"params":"string $slug The string that will be tried for a unique slug, object $term The term object that the $slug will belong too, ","desc":"Will make slug unique, if it isn&#039;t already."},"wp_update_term":{"params":"int $term_id The ID of the term, string $taxonomy The context in which to relate the term to the object., array|string $args Overwrite term field values, ","desc":"Update term based on arguments provided."},"wp_defer_term_counting":{"params":"bool $defer Optional. Enable if true, disable if false., ","desc":"Enable or disable term counting."},"wp_update_term_count":{"params":"int|array $terms The term_taxonomy_id of the terms, string $taxonomy The context of the term., ","desc":"Updates the amount of terms in taxonomy."},"wp_update_term_count_now":{"params":"array $terms The term_taxonomy_id of terms to update., string $taxonomy The context of the term., ","desc":"Perform term count update immediately."},"clean_object_term_cache":{"params":"int|array $object_ids Single or list of term object ID(s), array|string $object_type The taxonomy object type, ","desc":"Removes the taxonomy relationship to terms from the cache."},"clean_term_cache":{"params":"int|array $ids Single or list of Term IDs, string $taxonomy Can be empty and will assume tt_ids, else will use for context., bool $clean_taxonomy Whether to clean taxonomy wide caches (true), or just individual term object caches (false). Default is true., ","desc":"Will remove all of the term ids from the cache."},"get_object_term_cache":{"params":"int|array $id Term object ID, string $taxonomy Taxonomy Name, ","desc":"Retrieves the taxonomy relationship to the term object id."},"update_object_term_cache":{"params":"string|array $object_ids Single or list of term object ID(s), array|string $object_type The taxonomy object type, ","desc":"Updates the cache for Term ID(s)."},"update_term_cache":{"params":"array $terms List of Term objects to change, string $taxonomy Optional. Update Term to this taxonomy in cache, ","desc":"Updates Terms to Taxonomy in cache."},"_get_term_hierarchy":{"params":"string $taxonomy Taxonomy Name, ","desc":"Retrieves children of taxonomy as Term IDs."},"_get_term_children":{"params":"int $term_id The ancestor term: all returned terms should be descendants of $term_id., array $terms The set of terms---either an array of term objects or term IDs---from which those that are descendants of $term_id will be chosen., string $taxonomy The taxonomy which determines the hierarchy of the terms., ","desc":"Get the subset of $terms that are descendants of $term_id."},"_pad_term_counts":{"params":"array $terms List of Term IDs, string $taxonomy Term Context, ","desc":"Add count of children to parent count."},"_update_post_term_count":{"params":"array $terms List of Term taxonomy IDs, object $taxonomy Current taxonomy object of terms, ","desc":"Will update term count based on object types of the current taxonomy."},"_update_generic_term_count":{"params":"array $terms List of Term taxonomy IDs, object $taxonomy Current taxonomy object of terms, ","desc":"Will update term count based on number of objects."},"get_term_link":{"params":"object|int|string $term , string $taxonomy (optional if $term is object), ","desc":"Generates a permalink for a taxonomy term archive."},"the_taxonomies":{"params":"array $args Override the defaults., ","desc":"Display the taxonomies of a post with available options."},"get_the_taxonomies":{"params":"int $post Optional. Post ID or will use Global Post ID (in loop)., array $args Override the defaults., ","desc":"Retrieve all taxonomies associated with a post."},"get_post_taxonomies":{"params":"int $post Optional. Post ID, ","desc":"Retrieve all taxonomies of a post with just the names."},"is_object_in_term":{"params":"int $object_id ID of the object (post ID, link ID, ...), string $taxonomy Single taxonomy name, int|string|array $terms Optional. Term term_id, name, slug or array of said, ","desc":"Determine if the given object is associated with any of the given terms."},"is_object_in_taxonomy":{"params":"string $object_type Object type string, string $taxonomy Single taxonomy name, ","desc":"Determine if the given object type is associated with the given taxonomy."},"get_ancestors":{"params":"int $object_id The ID of the object, string $object_type The type of object for which we&#039;ll be retrieving ancestors., ","desc":"Get an array of ancestor IDs for a given object."},"wp_get_term_taxonomy_parent_id":{"params":"int $term_id , string $taxonomy , ","desc":"Returns the term&#039;s parent&#039;s term_ID"},"wp_check_term_hierarchy_for_loops":{"params":"int $parent term_id of the parent for the term we&#039;re checking., int $term_id The term we&#039;re checking., string $taxonomy The taxonomy of the term we&#039;re checking., ","desc":"Checks the given subset of the term hierarchy for hierarchy loops."},"mysql2date":{"params":"string $dateformatstring Either &#039;G&#039;, &#039;U&#039;, or php date format., string $mysqlstring Time from mysql DATETIME field., bool $translate Optional. Default is true. Will switch format to locale., ","desc":"Converts MySQL DATETIME field to user specified date format."},"current_time":{"params":"string $type Either &#039;mysql&#039; or &#039;timestamp&#039;., int|bool $gmt Optional. Whether to use GMT timezone. Default is false., ","desc":"Retrieve the current time based on specified type."},"date_i18n":{"params":"string $dateformatstring Format to display the date., int $unixtimestamp Optional. Unix timestamp., bool $gmt Optional, default is false. Whether to convert to GMT for time., ","desc":"Retrieve the date in localized format, based on timestamp."},"number_format_i18n":{"params":"int $number The number to convert based on locale., int $decimals Precision of the number of decimal places., ","desc":"Convert integer number to format based on the locale."},"size_format":{"params":"int|string $bytes Number of bytes. Note max integer size for integers., int $decimals Precision of number of decimal places. Deprecated., ","desc":"Convert number of bytes largest unit bytes will fit into."},"get_weekstartend":{"params":"string $mysqlstring Date or datetime field type from mysql., int $start_of_week Optional. Start of the week as an integer., ","desc":"Get the week start and end from the datetime or date string from mysql."},"maybe_unserialize":{"params":"string $original Maybe unserialized original, if is needed., ","desc":"Unserialize value only if it was serialized."},"is_serialized":{"params":"mixed $data Value to check to see if was serialized., ","desc":"Check value to find if it was serialized."},"is_serialized_string":{"params":"mixed $data Serialized data, ","desc":"Check whether serialized data is of string type."},"get_option":{"params":"string $option Name of option to retrieve. Expected to not be SQL-escaped., mixed $default Optional. Default value to return if the option does not exist., ","desc":"Retrieve option value based on name of option."},"wp_protect_special_option":{"params":"string $option Option name., ","desc":"Protect WordPress special option from being modified."},"form_option":{"params":"string $option Option name., ","desc":"Print option value after sanitizing for forms."},"wp_load_alloptions":{"params":"","desc":"Loads and caches all autoloaded options, if available or all options."},"wp_load_core_site_options":{"params":"int $site_id Optional site ID for which to query the options. Defaults to the current site., ","desc":"Loads and caches certain often requested site options if is_multisite() and a persistent cache is not being used."},"update_option":{"params":"string $option Option name. Expected to not be SQL-escaped., mixed $newvalue Option value. Expected to not be SQL-escaped., ","desc":"Update the value of an option that was already added."},"add_option":{"params":"string $option Name of option to add. Expected to not be SQL-escaped., mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped., mixed $deprecated Optional. Description. Not used anymore., bool $autoload Optional. Default is enabled. Whether to load the option when WordPress starts up., ","desc":"Add a new option."},"delete_option":{"params":"string $option Name of option to remove. Expected to not be SQL-escaped., ","desc":"Removes option by name. Prevents removal of protected WordPress options."},"delete_transient":{"params":"string $transient Transient name. Expected to not be SQL-escaped., ","desc":"Delete a transient."},"get_transient":{"params":"string $transient Transient name. Expected to not be SQL-escaped, ","desc":"Get the value of a transient."},"set_transient":{"params":"string $transient Transient name. Expected to not be SQL-escaped., mixed $value Transient value. Expected to not be SQL-escaped., int $expiration Time until expiration in seconds, default 0, ","desc":"Set/update the value of a transient."},"wp_user_settings":{"params":"","desc":"Saves and restores user interface settings stored in a cookie."},"get_user_setting":{"params":"string $name The name of the setting., string $default Optional default value to return when $name is not set., ","desc":"Retrieve user interface setting value based on setting name."},"set_user_setting":{"params":"string $name The name of the setting., string $value The value for the setting., ","desc":"Add or update user interface setting."},"delete_user_setting":{"params":"mixed $names The name or array of names of the setting to be deleted., ","desc":"Delete user interface settings."},"get_all_user_settings":{"params":"","desc":"Retrieve all user interface settings."},"wp_set_all_user_settings":{"params":"unknown $all , ","desc":"Private. Set all user interface settings."},"delete_all_user_settings":{"params":"","desc":"Delete the user settings of the current user."},"maybe_serialize":{"params":"mixed $data Data that might be serialized., ","desc":"Serialize data, if needed."},"xmlrpc_getposttitle":{"params":"string $content XMLRPC XML Request content, ","desc":"Retrieve post title from XMLRPC XML."},"xmlrpc_getpostcategory":{"params":"string $content XMLRPC XML Request content, ","desc":"Retrieve the post category or categories from XMLRPC XML."},"xmlrpc_removepostdata":{"params":"string $content XMLRPC XML Request content, ","desc":"XMLRPC XML content without title and category elements."},"debug_fopen":{"params":"string $filename File path to debug file., string $mode Same as fopen() mode parameter., ","desc":"Open the file handle for debugging."},"debug_fwrite":{"params":"resource $fp File handle for debugging file., string $string Content to write to debug file., ","desc":"Write contents to the file used for debugging."},"debug_fclose":{"params":"resource $fp Debug File handle., ","desc":"Close the debugging file handle."},"do_enclose":{"params":"string $content Post Content, int $post_ID Post ID, ","desc":"Check content for video and audio links to add as enclosures."},"wp_get_http":{"params":"string $url URL to fetch., string|bool $file_path Optional. File path to write request to., int $red (private) The number of Redirects followed, Upon 5 being hit, returns false., ","desc":"Perform a HTTP HEAD or GET request."},"wp_get_http_headers":{"params":"string $url , bool $deprecated Not Used., ","desc":"Retrieve HTTP Headers from URL."},"is_new_day":{"params":"","desc":"Whether today is a new day."},"build_query":{"params":"array $data URL-encode key/value pairs., ","desc":"Build URL query based on an associative and, or indexed array."},"_http_build_query":{"params":"","desc":""},"add_query_arg":{"params":"mixed $param1 Either newkey or an associative_array, mixed $param2 Either newvalue or oldquery or uri, mixed $param3 Optional. Old query or uri, ","desc":"Retrieve a modified URL query string."},"remove_query_arg":{"params":"string|array $key Query key or keys to remove., bool $query When false uses the $_SERVER value., ","desc":"Removes an item or list from the query string."},"add_magic_quotes":{"params":"array $array Array to used to walk while sanitizing contents., ","desc":"Walks the array while sanitizing the contents."},"wp_remote_fopen":{"params":"string $uri URI/URL of web page to retrieve., ","desc":"HTTP request for URI to retrieve content."},"wp":{"params":"string $query_vars Default WP_Query arguments., ","desc":"Set up the WordPress query."},"get_status_header_desc":{"params":"int $code HTTP status code., ","desc":"Retrieve the description for the HTTP status."},"status_header":{"params":"int $header HTTP status code, ","desc":"Set HTTP status header."},"wp_get_nocache_headers":{"params":"","desc":"Gets the header information to prevent caching."},"nocache_headers":{"params":"","desc":"Sets the headers to prevent caching for the different browsers."},"cache_javascript_headers":{"params":"","desc":"Set the headers for caching for 10 days with JavaScript content type."},"get_num_queries":{"params":"","desc":"Retrieve the number of database queries during the WordPress execution."},"bool_from_yn":{"params":"string $yn Character string containing either &#039;y&#039; or &#039;n&#039;, ","desc":"Whether input is yes or no. Must be &#039;y&#039; to be true."},"do_feed":{"params":"","desc":"Loads the feed template from the use of an action hook."},"do_feed_rdf":{"params":"","desc":"Load the RDF RSS 0.91 Feed template."},"do_feed_rss":{"params":"","desc":"Load the RSS 1.0 Feed Template."},"do_feed_rss2":{"params":"bool $for_comments True for the comment feed, false for normal feed., ","desc":"Load either the RSS2 comment feed or the RSS2 posts feed."},"do_feed_atom":{"params":"bool $for_comments True for the comment feed, false for normal feed., ","desc":"Load either Atom comment feed or Atom posts feed."},"do_robots":{"params":"","desc":"Display the robots.txt file content."},"is_blog_installed":{"params":"","desc":"Test whether blog is already installed."},"wp_nonce_url":{"params":"string $actionurl URL to add nonce action, string $action Optional. Nonce action name, ","desc":"Retrieve URL with nonce added to URL query."},"wp_nonce_field":{"params":"string $action Optional. Action name., string $name Optional. Nonce name., bool $referer Optional, default true. Whether to set the referer field for validation., bool $echo Optional, default true. Whether to display or return hidden form field., ","desc":"Retrieve or display nonce hidden field for forms."},"wp_referer_field":{"params":"bool $echo Whether to echo or return the referer field., ","desc":"Retrieve or display referer hidden field for forms."},"wp_original_referer_field":{"params":"bool $echo Whether to echo the original http referer, string $jump_back_to Optional, default is &#039;current&#039;. Can be &#039;previous&#039; or page you want to jump back to., ","desc":"Retrieve or display original referer hidden field for forms."},"wp_get_referer":{"params":"","desc":"Retrieve referer from &#039;_wp_http_referer&#039; or HTTP referer. If it&#039;s the same as the current request URL, will return false."},"wp_get_original_referer":{"params":"","desc":"Retrieve original referer that was posted, if it exists."},"wp_mkdir_p":{"params":"string $target Full path to attempt to create., ","desc":"Recursive directory creation based on full path."},"path_is_absolute":{"params":"string $path File path, ","desc":"Test if a give filesystem path is absolute (&#039;/foo/bar&#039;, &#039;c:windows&#039;)."},"path_join":{"params":"string $base , string $path , ","desc":"Join two filesystem paths together (e.g. &#039;give me $path relative to $base&#039;)."},"get_temp_dir":{"params":"","desc":"Determines a writable directory for temporary files."},"wp_upload_dir":{"params":"string $time Optional. Time formatted in &#039;yyyy/mm&#039;., ","desc":"Get an array containing the current upload directory&#039;s path and url."},"wp_unique_filename":{"params":"string $dir , string $filename , mixed $unique_filename_callback Callback., ","desc":"Get a filename that is sanitized and unique for the given directory."},"wp_upload_bits":{"params":"string $name , null $deprecated Never used. Set to null., mixed $bits File content, string $time Optional. Time formatted in &#039;yyyy/mm&#039;., ","desc":"Create a file in the upload folder with given content."},"wp_ext2type":{"params":"string $ext The extension to search., ","desc":"Retrieve the file type based on the extension name."},"wp_check_filetype":{"params":"string $filename File name or path., array $mimes Optional. Key is the file extension with value as the mime type., ","desc":"Retrieve the file type from the file name."},"wp_check_filetype_and_ext":{"params":"string $file Full path to the image., string $filename The filename of the image (may differ from $file due to $file being in a tmp directory), array $mimes Optional. Key is the file extension with value as the mime type., ","desc":"Attempt to determine the real file type of a file."},"get_allowed_mime_types":{"params":"","desc":"Retrieve list of allowed mime types and file extensions."},"wp_explain_nonce":{"params":"string $action Nonce action., ","desc":"Retrieve nonce action &quot;Are you sure&quot; message."},"wp_nonce_ays":{"params":"string $action The nonce action., ","desc":"Display &quot;Are You Sure&quot; message to confirm the action being taken."},"wp_die":{"params":"string $message Error message., string $title Error title., string|array $args Optional arguments to control behavior., ","desc":"Kill WordPress execution and display HTML message with error message."},"_default_wp_die_handler":{"params":"string $message Error message., string $title Error title., string|array $args Optional arguments to control behavior., ","desc":"Kill WordPress execution and display HTML message with error message."},"_xmlrpc_wp_die_handler":{"params":"string $message Error message., string $title Error title., string|array $args Optional arguments to control behavior., ","desc":"Kill WordPress execution and display XML message with error message."},"_xmlrpc_wp_die_filter":{"params":"","desc":"Filter to enable special wp_die handler for xmlrpc requests."},"_config_wp_home":{"params":"string $url URL for the home location, ","desc":"Retrieve the WordPress home page URL."},"_config_wp_siteurl":{"params":"string $url URL to set the WordPress site location., ","desc":"Retrieve the WordPress site URL."},"_mce_set_direction":{"params":"array $input MCE plugin array., ","desc":"Set the localized direction for MCE plugin."},"smilies_init":{"params":"","desc":"Convert smiley code to the icon graphic file equivalent."},"wp_parse_args":{"params":"string|array $args Value to merge with $defaults, array $defaults Array that serves as the defaults., ","desc":"Merge user defined arguments into defaults array."},"wp_parse_id_list":{"params":"array|string $list , ","desc":"Clean up an array, comma- or space-separated list of IDs."},"wp_array_slice_assoc":{"params":"array $array The original array, array $keys The list of keys, ","desc":"Extract a slice of an array, given a list of keys."},"wp_filter_object_list":{"params":"array $list An array of objects to filter, array $args An array of key =&gt; value arguments to match against each object, string $operator The logical operation to perform. &#039;or&#039; means only one element from the array needs to match; &#039;and&#039; means all elements must match. The default is &#039;and&#039;., bool|string $field A field from the object to place instead of the entire object, ","desc":"Filters a list of objects, based on a set of key =&gt; value arguments."},"wp_list_filter":{"params":"array $list An array of objects to filter, array $args An array of key =&gt; value arguments to match against each object, string $operator The logical operation to perform: &#039;AND&#039; means all elements from the array must match; &#039;OR&#039; means only one element needs to match; &#039;NOT&#039; means no elements may match. The default is &#039;AND&#039;., ","desc":"Filters a list of objects, based on a set of key =&gt; value arguments."},"wp_list_pluck":{"params":"array $list A list of objects or arrays, int|string $field A field from the object to place instead of the entire object, ","desc":"Pluck a certain field out of each object in a list."},"wp_maybe_load_widgets":{"params":"","desc":"Determines if Widgets library should be loaded."},"wp_widgets_add_menu":{"params":"","desc":"Append the Widgets menu to the themes main menu."},"wp_ob_end_flush_all":{"params":"","desc":"Flush all output buffers for PHP 5.2."},"dead_db":{"params":"","desc":"Load custom DB error or display WordPress DB error."},"absint":{"params":"mixed $maybeint Data you wish to have converted to a nonnegative integer, ","desc":"Converts value to nonnegative integer."},"url_is_accessable_via_ssl":{"params":"string $url , ","desc":"Determines if the blog can be accessed over SSL."},"_deprecated_function":{"params":"string $function The function that was called, string $version The version of WordPress that deprecated the function, string $replacement Optional. The function that should have been called, ","desc":"Marks a function as deprecated and informs when it has been used."},"_deprecated_file":{"params":"string $file The file that was included, string $version The version of WordPress that deprecated the file, string $replacement Optional. The file that should have been included based on ABSPATH, string $message Optional. A message regarding the change, ","desc":"Marks a file as deprecated and informs when it has been used."},"_deprecated_argument":{"params":"string $function The function that was called, string $version The version of WordPress that deprecated the argument used, string $message Optional. A message regarding the change., ","desc":"Marks a function argument as deprecated and informs when it has been used."},"_doing_it_wrong":{"params":"string $function The function that was called., string $message A message explaining what has been done incorrectly., string $version The version of WordPress where the message was added., ","desc":"Marks something as being incorrectly called."},"is_lighttpd_before_150":{"params":"","desc":"Is the server running earlier than 1.5.0 version of lighttpd?"},"apache_mod_loaded":{"params":"string $mod e.g. mod_rewrite, bool $default The default return value if the module is not found, ","desc":"Does the specified module exist in the Apache config?"},"iis7_supports_permalinks":{"params":"","desc":"Check if IIS 7 supports pretty permalinks."},"validate_file":{"params":"string $file File path., array $allowed_files List of allowed files., ","desc":"File validates against allowed set of defined rules."},"is_ssl":{"params":"","desc":"Determine if SSL is used."},"force_ssl_login":{"params":"string|bool $force Optional., ","desc":"Whether SSL login should be forced."},"force_ssl_admin":{"params":"string|bool $force , ","desc":"Whether to force SSL used for the Administration Screens."},"wp_guess_url":{"params":"","desc":"Guess the URL for the site."},"wp_suspend_cache_addition":{"params":"bool $suspend Optional. Suspends additions if true, re-enables them if false., ","desc":"Temporarily suspend cache additions."},"wp_suspend_cache_invalidation":{"params":"bool $suspend Whether to suspend or enable cache invalidation, ","desc":"Suspend cache invalidation."},"get_site_option":{"params":"string $option Name of option to retrieve. Expected to not be SQL-escaped., mixed $default Optional value to return if option doesn&#039;t exist. Default false., bool $use_cache Whether to use cache. Multisite only. Default true., ","desc":"Retrieve site option value based on name of option."},"add_site_option":{"params":"string $option Name of option to add. Expected to not be SQL-escaped., mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped., ","desc":"Add a new site option."},"delete_site_option":{"params":"string $option Name of option to remove. Expected to not be SQL-escaped., ","desc":"Removes site option by name."},"update_site_option":{"params":"string $option Name of option. Expected to not be SQL-escaped., mixed $value Option value. Expected to not be SQL-escaped., ","desc":"Update the value of a site option that was already added."},"delete_site_transient":{"params":"string $transient Transient name. Expected to not be SQL-escaped., ","desc":"Delete a site transient."},"get_site_transient":{"params":"string $transient Transient name. Expected to not be SQL-escaped., ","desc":"Get the value of a site transient."},"set_site_transient":{"params":"string $transient Transient name. Expected to not be SQL-escaped., mixed $value Transient value. Expected to not be SQL-escaped., int $expiration Time until expiration in seconds, default 0, ","desc":"Set/update the value of a site transient."},"is_main_site":{"params":"int $blog_id optional blog id to test (default current blog), ","desc":"Is main site?"},"global_terms_enabled":{"params":"","desc":"Whether global terms are enabled."},"wp_timezone_override_offset":{"params":"","desc":"gmt_offset modification for smart timezone handling."},"_wp_timezone_choice_usort_callback":{"params":"unknown_type $a , unknown_type $b , ","desc":"{@internal Missing Short Description}}"},"wp_timezone_choice":{"params":"string $selected_zone Selected Zone, ","desc":"Gives a nicely formatted list of timezone strings. // temporary! Not in final"},"_cleanup_header_comment":{"params":"string $str , ","desc":"Strip close comment and close php tags from file headers used by WP."},"wp_scheduled_delete":{"params":"","desc":"Permanently deletes posts, pages, attachments, and comments which have been in the trash for EMPTY_TRASH_DAYS."},"get_file_data":{"params":"string $file Path to the file, array $default_headers List of headers, in the format array(&#039;HeaderKey&#039; =&gt; &#039;Header Name&#039;), string $context If specified adds filter hook &quot;extra_{$context}_headers&quot;, ","desc":"Retrieve metadata from a file."},"_search_terms_tidy":{"params":"string $t , ","desc":"Used internally to tidy up the search terms."},"__return_true":{"params":"","desc":"Returns true."},"__return_false":{"params":"","desc":"Returns false."},"__return_zero":{"params":"","desc":"Returns 0."},"__return_empty_array":{"params":"","desc":"Returns an empty array."},"send_nosniff_header":{"params":"","desc":"Send a HTTP header to disable content type sniffing in browsers which support it."},"_wp_mysql_week":{"params":"string $column , ","desc":"Returns a MySQL expression for selecting the week number based on the start_of_week option."},"wp_find_hierarchy_loop":{"params":"callback $callback function that accepts ( ID, $callback_args ) and outputs parent_ID, int $start The ID to start the loop check at, int $start_parent the parent_ID of $start to use instead of calling $callback( $start ). Use null to always use $callback, array $callback_args optional additional arguments to send to $callback, ","desc":"Finds hierarchy loops using a callback function that maps object IDs to parent IDs."},"wp_find_hierarchy_loop_tortoise_hare":{"params":"callback $callback function that accepts ( ID, callback_arg, ... ) and outputs parent_ID, int $start The ID to start the loop check at, array $override an array of ( ID =&gt; parent_ID, ... ) to use instead of $callback, array $callback_args optional additional arguments to send to $callback, bool $_return_loop Return loop members or just detect presence of loop? Only set to true if you already know the given $start is part of a loop (otherwise the returned array might include branches), ","desc":"Uses the &quot;The Tortoise and the Hare&quot; algorithm to detect loops."},"send_frame_options_header":{"params":"","desc":"Send a HTTP header to limit rendering of pages to same origin iframes."},"wp_allowed_protocols":{"params":"","desc":"Retrieve a list of protocols to allow in HTML attributes."},"get_sitestats":{"params":"","desc":"Gets the network&#039;s site and user counts."},"get_admin_users_for_domain":{"params":"string $sitedomain Optional. Site domain., string $path Optional. Site path., ","desc":"Get the admin for a domain/path combination."},"get_active_blog_for_user":{"params":"int $user_id The unique ID of the user, ","desc":"Get one of a user&#039;s active blogs"},"get_user_count":{"params":"","desc":"The number of active users in your installation."},"get_blog_count":{"params":"int $id Optional. A site_id., ","desc":"The number of active sites on your installation."},"get_blog_post":{"params":"int $blog_id ID of the blog., int $post_id ID of the post you&#039;re looking for., ","desc":"Get a blog post from any site on the network."},"add_user_to_blog":{"params":"int $blog_id ID of the blog you&#039;re adding the user to., int $user_id ID of the user you&#039;re adding., string $role The role you want the user to have, ","desc":"Add a user to a blog."},"remove_user_from_blog":{"params":"int $user_id ID of the user you&#039;re removing., int $blog_id ID of the blog you&#039;re removing the user from., string $reassign Optional. A user to whom to reassign posts., ","desc":"Remove a user from a blog."},"create_empty_blog":{"params":"string $domain The new blog&#039;s domain., string $path The new blog&#039;s path., string $string The new blog&#039;s title., int $site Optional. Defaults to 1., ","desc":"Create an empty blog."},"get_blog_permalink":{"params":"int $_blog_id ID of the source blog., int $post_id ID of the desired post., ","desc":"Get the permalink for a post on another blog."},"get_blog_id_from_url":{"params":"string $domain , string $path Optional. Not required for subdomain installations., ","desc":"Get a blog&#039;s numeric ID from its URL."},"is_email_address_unsafe":{"params":"string $user_email The email provided by the user at registration., ","desc":"Checks an email address against a list of banned domains."},"wpmu_validate_user_signup":{"params":"string $user_name The login name provided by the user., string $user_email The email provided by the user., ","desc":"Processes new user registrations."},"wpmu_validate_blog_signup":{"params":"string $blogname The blog name provided by the user. Must be unique., string $blog_title The blog title provided by the user., ","desc":"Processes new site registrations."},"wpmu_signup_blog":{"params":"string $domain The requested domain., string $path The requested path., string $title The requested site title., string $user The user&#039;s requested login name., string $user_email The user&#039;s email address., array $meta By default, contains the requested privacy setting and lang_id., ","desc":"Record site signup information for future activation."},"wpmu_signup_user":{"params":"string $user The user&#039;s requested login name., string $user_email The user&#039;s email address., array $meta By default, this is an empty array., ","desc":"Record user signup information for future activation."},"wpmu_signup_blog_notification":{"params":"string $domain The new blog domain., string $path The new blog path., string $title The site title., string $user The user&#039;s login name., string $user_email The user&#039;s email address., array $meta By default, contains the requested privacy setting and lang_id., string $key The activation key created in wpmu_signup_blog(), ","desc":"Notify user of signup success."},"wpmu_signup_user_notification":{"params":"string $user The user&#039;s login name., string $user_email The user&#039;s email address., array $meta By default, an empty array., string $key The activation key created in wpmu_signup_user(), ","desc":"Notify user of signup success."},"wpmu_activate_signup":{"params":"string $key The activation key provided to the user., ","desc":"Activate a signup."},"wpmu_create_user":{"params":"string $user_name The new user&#039;s login name., string $password The new user&#039;s password., string $email The new user&#039;s email address., ","desc":"Create a user."},"wpmu_create_blog":{"params":"string $domain The new site&#039;s domain., string $path The new site&#039;s path., string $title The new site&#039;s title., int $user_id The user ID of the new site&#039;s admin., array $meta Optional. Used to set initial site options., int $site_id Optional. Only relevant on multi-network installs., ","desc":"Create a site."},"newblog_notify_siteadmin":{"params":"int $blog_id The new site&#039;s ID., ","desc":"Notifies the network admin that a new site has been activated."},"newuser_notify_siteadmin":{"params":"int $user_id The new user&#039;s ID., ","desc":"Notifies the network admin that a new user has been activated."},"domain_exists":{"params":"string $domain The domain to be checked., string $path The path to be checked., int $site_id Optional. Relevant only on multi-network installs., ","desc":"Check whether a blogname is already taken."},"insert_blog":{"params":"string $domain The domain of the new site., string $path The path of the new site., int $site_id Unless you&#039;re running a multi-network install, be sure to set this value to 1., ","desc":"Store basic site info in the blogs table."},"install_blog":{"params":"int $blog_id The value returned by insert_blog()., string $blog_title The title of the new site., ","desc":"Install an empty blog."},"install_blog_defaults":{"params":"int $blog_id Ignored in this function., int $user_id , ","desc":"Set blog defaults."},"wpmu_welcome_notification":{"params":"int $blog_id , int $user_id , string $password , string $title The new blog&#039;s title, array $meta Optional. Not used in the default function, but is passed along to hooks for customization., ","desc":"Notify a user that her blog activation has been successful."},"wpmu_welcome_user_notification":{"params":"int $user_id , string $password , array $meta Optional. Not used in the default function, but is passed along to hooks for customization., ","desc":"Notify a user that her account activation has been successful."},"get_current_site":{"params":"","desc":"Get the current site info."},"get_user_id_from_string":{"params":"string $string , ","desc":"Get a numeric user ID from either an email address or a login."},"get_most_recent_post_of_user":{"params":"int $user_id , ","desc":"Get a user&#039;s most recent post."},"get_dirsize":{"params":"string $directory , ","desc":"Get the size of a directory."},"recurse_dirsize":{"params":"string $directory , ","desc":"Get the size of a directory recursively."},"upload_is_user_over_quota":{"params":"bool $echo Optional. If $echo is set and the quota is exceeded, a warning message is echoed. Default is true., ","desc":"Check whether a blog has used its allotted upload space."},"check_upload_mimes":{"params":"array $mimes , ","desc":"Check an array of MIME types against a whitelist."},"update_posts_count":{"params":"","desc":"Update a blog&#039;s post count."},"wpmu_log_new_registrations":{"params":"int $blog_id , int $user_id , ","desc":"Logs user registrations."},"fix_import_form_size":{"params":"int $size , ","desc":"Get the remaining upload space for this blog."},"global_terms":{"params":"int $term_id An ID for a term on the current blog., ","desc":"Maintains a canonical list of terms by syncing terms created for each blog with the global terms table."},"redirect_this_site":{"params":"","desc":"Ensure that the current site&#039;s domain is listed in the allowed redirect host list."},"upload_is_file_too_big":{"params":"array $upload , ","desc":"Check whether an upload is too big."},"signup_nonce_fields":{"params":"","desc":"Add a nonce field to the signup page."},"signup_nonce_check":{"params":"array $result , ","desc":"Process the signup nonce created in signup_nonce_fields()."},"maybe_redirect_404":{"params":"","desc":"Correct 404 redirects when NOBLOGREDIRECT is defined."},"maybe_add_existing_user_to_blog":{"params":"","desc":"Add a new user to a blog by visiting /newbloguser/username/."},"add_existing_user_to_blog":{"params":"array $details , ","desc":"Add a user to a blog based on details from maybe_add_existing_user_to_blog()."},"add_new_user_to_blog":{"params":"int $user_id , string $email , array $meta , ","desc":"Add a newly created user to the appropriate blog"},"fix_phpmailer_messageid":{"params":"","desc":"Correct From host on outgoing mail to match the site domain"},"is_user_spammy":{"params":"string $username , ","desc":"Check to see whether a user is marked as a spammer, based on username"},"update_blog_public":{"params":"int $old_value , int $value The new public value, ","desc":"Update this blog&#039;s &#039;public&#039; setting in the global blogs table."},"get_dashboard_blog":{"params":"","desc":"Get the &quot;dashboard blog&quot;, the blog where users without a blog edit their profile data."},"is_user_option_local":{"params":"string $key , int $user_id Optional. Defaults to current user., int $blog_id Optional. Defaults to current blog., ","desc":"Check whether a usermeta key has to do with the current blog."},"users_can_register_signup_filter":{"params":"","desc":"Check whether users can self-register, based on Network settings."},"welcome_user_msg_filter":{"params":"string $text , ","desc":"Ensure that the welcome message is not empty. Currently unused."},"force_ssl_content":{"params":"string|bool $force , ","desc":"Whether to force SSL on content."},"filter_SSL":{"params":"","desc":"Formats an String URL to use HTTPS if HTTP is found."},"wp_schedule_update_network_counts":{"params":"","desc":"Schedule update of the network-wide counts for the current network."},"wp_update_network_counts":{"params":"","desc":"Update the network-wide counts for the current network."},"ms_upload_constants":{"params":"","desc":"Defines Multisite upload constants."},"ms_cookie_constants":{"params":"","desc":"Defines Multisite cookie constants."},"ms_file_constants":{"params":"","desc":"Defines Multisite file constants."},"ms_subdomain_constants":{"params":"","desc":"Defines Multisite subdomain constants and handles warnings and notices."},"get_postdata":{"params":"int $postid , ","desc":"Entire Post data."},"start_wp":{"params":"","desc":"Sets up the WordPress Loop."},"the_category_ID":{"params":"bool $echo , ","desc":"Return or Print Category ID."},"the_category_head":{"params":"string $before , string $after , ","desc":"Print category with optional text before and after."},"previous_post":{"params":"string $format , string $previous , string $title , string $in_same_cat , int $limitprev , string $excluded_categories , ","desc":"Prints link to the previous post."},"next_post":{"params":"string $format , string $next , string $title , string $in_same_cat , int $limitnext , string $excluded_categories , ","desc":"Prints link to the next post."},"user_can_create_post":{"params":"int $user_id , int $blog_id Not Used, int $category_id Not Used, ","desc":"Whether user can create a post."},"user_can_create_draft":{"params":"int $user_id , int $blog_id Not Used, int $category_id Not Used, ","desc":"Whether user can create a post."},"user_can_edit_post":{"params":"int $user_id , int $post_id , int $blog_id Not Used, ","desc":"Whether user can edit a post."},"user_can_delete_post":{"params":"int $user_id , int $post_id , int $blog_id Not Used, ","desc":"Whether user can delete a post."},"user_can_set_post_date":{"params":"int $user_id , int $blog_id Not Used, int $category_id Not Used, ","desc":"Whether user can set new posts&#039; dates."},"user_can_edit_post_date":{"params":"int $user_id , int $post_id , int $blog_id Not Used, ","desc":"Whether user can delete a post."},"user_can_edit_post_comments":{"params":"int $user_id , int $post_id , int $blog_id Not Used, ","desc":"Whether user can delete a post."},"user_can_delete_post_comments":{"params":"int $user_id , int $post_id , int $blog_id Not Used, ","desc":"Whether user can delete a post."},"user_can_edit_user":{"params":"int $user_id , int $other_user , ","desc":"Can user can edit other user."},"get_linksbyname":{"params":"string $cat_name Optional. The category name to use. If no match is found uses all., string $before Optional. The html to output before the link., string $after Optional. The html to output after the link., string $between Optional. The html to output between the link/image and it&#039;s description. Not used if no image or $show_images is true., bool $show_images Optional. Whether to show images (if defined)., string $orderby Optional. The order to output the links. E.g. &#039;id&#039;, &#039;name&#039;, &#039;url&#039;, &#039;description&#039; or &#039;rating&#039;. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify &#039;rand&#039; as the order which will return links in a random order., bool $show_description Optional. Whether to show the description if show_images=false/not defined., bool $show_rating Optional. Show rating stars/chars., int $limit Optional. Limit to X entries. If not specified, all entries are shown., int $show_updated Optional. Whether to show last updated timestamp, ","desc":"Gets the links associated with category $cat_name."},"wp_get_linksbyname":{"params":"string $category The category to use., string $args , ","desc":"Gets the links associated with the named category."},"get_linkobjectsbyname":{"params":"string $cat_name The category name to use. If no match is found uses all., string $orderby The order to output the links. E.g. &#039;id&#039;, &#039;name&#039;, &#039;url&#039;, &#039;description&#039;, or &#039;rating&#039;. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify &#039;rand&#039; as the order which will return links in a random order., int $limit Limit to X entries. If not specified, all entries are shown., ","desc":"Gets an array of link objects associated with category $cat_name."},"get_linkobjects":{"params":"int $category The category to use. If no category supplied uses all, string $orderby the order to output the links. E.g. &#039;id&#039;, &#039;name&#039;, &#039;url&#039;, &#039;description&#039;, or &#039;rating&#039;. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify &#039;rand&#039; as the order which will return links in a random order., int $limit Limit to X entries. If not specified, all entries are shown., ","desc":"Gets an array of link objects associated with category n."},"get_linksbyname_withrating":{"params":"string $cat_name The category name to use. If no match is found uses all, string $before The html to output before the link, string $after The html to output after the link, string $between The html to output between the link/image and it&#039;s description. Not used if no image or show_images is true, bool $show_images Whether to show images (if defined)., string $orderby the order to output the links. E.g. &#039;id&#039;, &#039;name&#039;, &#039;url&#039;, &#039;description&#039;, or &#039;rating&#039;. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify &#039;rand&#039; as the order which will return links in a random order., bool $show_description Whether to show the description if show_images=false/not defined, int $limit Limit to X entries. If not specified, all entries are shown., int $show_updated Whether to show last updated timestamp, ","desc":"Gets the links associated with category &#039;cat_name&#039; and display rating stars/chars."},"get_links_withrating":{"params":"int $category The category to use. If no category supplied uses all, string $before The html to output before the link, string $after The html to output after the link, string $between The html to output between the link/image and it&#039;s description. Not used if no image or show_images == true, bool $show_images Whether to show images (if defined)., string $orderby The order to output the links. E.g. &#039;id&#039;, &#039;name&#039;, &#039;url&#039;, &#039;description&#039;, or &#039;rating&#039;. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify &#039;rand&#039; as the order which will return links in a random order., bool $show_description Whether to show the description if show_images=false/not defined., string $limit Limit to X entries. If not specified, all entries are shown., int $show_updated Whether to show last updated timestamp, ","desc":"Gets the links associated with category n and display rating stars/chars."},"get_autotoggle":{"params":"int $id The category to get. If no category supplied uses 0, ","desc":"Gets the auto_toggle setting."},"list_cats":{"params":"int $optionall , string $all , string $sort_column , string $sort_order , string $file , bool $list , int $optiondates , int $optioncount , int $hide_empty , int $use_desc_for_title , bool $children , int $child_of , int $categories , int $recurse , string $feed , string $feed_image , string $exclude , bool $hierarchical , ","desc":""},"wp_list_cats":{"params":"string|array $args , ","desc":""},"dropdown_cats":{"params":"int $optionall , string $all , string $orderby , string $order , int $show_last_update , int $show_count , int $hide_empty , bool $optionnone , int $selected , int $exclude , ","desc":""},"list_authors":{"params":"bool $optioncount , bool $exclude_admin , bool $show_fullname , bool $hide_empty , string $feed , string $feed_image , ","desc":""},"wp_get_post_cats":{"params":"int $blogid Not Used, int $post_ID , ","desc":""},"wp_set_post_cats":{"params":"int $blogid Not used, int $post_ID , array $post_categories , ","desc":"Sets the categories that the post id belongs to."},"get_archives":{"params":"string $type , string $limit , string $format , string $before , string $after , bool $show_post_count , ","desc":""},"get_author_link":{"params":"bool $echo Optional., int $author_id Required., string $author_nicename Optional., ","desc":"Returns or Prints link to the author&#039;s posts."},"link_pages":{"params":"string $before , string $after , string $next_or_number , string $nextpagelink , string $previouspagelink , string $pagelink , string $more_file , ","desc":"Print list of pages based on arguments."},"get_settings":{"params":"string $option , ","desc":"Get value based on option."},"permalink_link":{"params":"","desc":"Print the permalink of the current post in the loop."},"permalink_single_rss":{"params":"string $deprecated , ","desc":"Print the permalink to the RSS feed."},"wp_get_links":{"params":"string $args a query string, ","desc":"Gets the links associated with category."},"get_links":{"params":"int $category The category to use. If no category supplied uses all, string $before the html to output before the link, string $after the html to output after the link, string $between the html to output between the link/image and its description. Not used if no image or show_images == true, bool $show_images whether to show images (if defined)., string $orderby the order to output the links. E.g. &#039;id&#039;, &#039;name&#039;, &#039;url&#039;, &#039;description&#039;, or &#039;rating&#039;. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify &#039;rand&#039; as the order which will return links in a random order., bool $show_description whether to show the description if show_images=false/not defined., bool $show_rating show rating stars/chars, int $limit Limit to X entries. If not specified, all entries are shown., int $show_updated whether to show last updated timestamp, bool $echo whether to echo the results, or return them instead, ","desc":"Gets the links associated with category by id."},"get_links_list":{"params":"string $order Sort link categories by &#039;name&#039; or &#039;id&#039;, ","desc":"Output entire list of links by category."},"links_popup_script":{"params":"string $text the text of the link, int $width the width of the popup window, int $height the height of the popup window, string $file the page to open in the popup window, bool $count the number of links in the db, ","desc":"Show the link to the links popup and the number of links."},"get_linkrating":{"params":"object $link , ","desc":""},"get_linkcatname":{"params":"int $id The category to get. If no category supplied uses 0, ","desc":"Gets the name of category by id."},"comments_rss_link":{"params":"string $link_text , ","desc":"Print RSS comment feed link."},"get_category_rss_link":{"params":"bool $echo , int $cat_ID , ","desc":"Print/Return link to category RSS2 feed."},"get_author_rss_link":{"params":"bool $echo , int $author_id , ","desc":"Print/Return link to author RSS feed."},"comments_rss":{"params":"","desc":"Return link to the post RSS feed."},"create_user":{"params":"string $username The user&#039;s username., string $password The user&#039;s password., string $email The user&#039;s email (optional)., ","desc":"An alias of wp_create_user()."},"gzip_compression":{"params":"","desc":"Unused function."},"get_commentdata":{"params":"int $comment_ID The ID of the comment, int $no_cache Whether to use the cache (cast to bool), bool $include_unapproved Whether to include unapproved comments, ","desc":"Retrieve an array of comment data about comment $comment_ID."},"get_catname":{"params":"int $cat_ID Category ID, ","desc":"Retrieve the category name by the category ID."},"get_category_children":{"params":"int $id Category ID to retrieve children., string $before Optional. Prepend before category term ID., string $after Optional, default is empty string. Append after category term ID., array $visited Optional. Category Term IDs that have already been added., ","desc":"Retrieve category children list separated before and after the term IDs."},"get_the_author_description":{"params":"","desc":"Retrieve the description of the author of the current post."},"the_author_description":{"params":"","desc":"Display the description of the author of the current post."},"get_the_author_login":{"params":"","desc":"Retrieve the login name of the author of the current post."},"the_author_login":{"params":"","desc":"Display the login name of the author of the current post."},"get_the_author_firstname":{"params":"","desc":"Retrieve the first name of the author of the current post."},"the_author_firstname":{"params":"","desc":"Display the first name of the author of the current post."},"get_the_author_lastname":{"params":"","desc":"Retrieve the last name of the author of the current post."},"the_author_lastname":{"params":"","desc":"Display the last name of the author of the current post."},"get_the_author_nickname":{"params":"","desc":"Retrieve the nickname of the author of the current post."},"the_author_nickname":{"params":"","desc":"Display the nickname of the author of the current post."},"get_the_author_email":{"params":"","desc":"Retrieve the email of the author of the current post."},"the_author_email":{"params":"","desc":"Display the email of the author of the current post."},"get_the_author_icq":{"params":"","desc":"Retrieve the ICQ number of the author of the current post."},"the_author_icq":{"params":"","desc":"Display the ICQ number of the author of the current post."},"get_the_author_yim":{"params":"","desc":"Retrieve the Yahoo! IM name of the author of the current post."},"the_author_yim":{"params":"","desc":"Display the Yahoo! IM name of the author of the current post."},"get_the_author_msn":{"params":"","desc":"Retrieve the MSN address of the author of the current post."},"the_author_msn":{"params":"","desc":"Display the MSN address of the author of the current post."},"get_the_author_aim":{"params":"","desc":"Retrieve the AIM address of the author of the current post."},"the_author_aim":{"params":"","desc":"Display the AIM address of the author of the current post."},"get_author_name":{"params":"int $auth_id The ID of the author., ","desc":"Retrieve the specified author&#039;s preferred display name."},"get_the_author_url":{"params":"","desc":"Retrieve the URL to the home page of the author of the current post."},"the_author_url":{"params":"","desc":"Display the URL to the home page of the author of the current post."},"get_the_author_ID":{"params":"","desc":"Retrieve the ID of the author of the current post."},"the_author_ID":{"params":"","desc":"Display the ID of the author of the current post."},"the_content_rss":{"params":"string $more_link_text Optional. Text to display when more content is available but not displayed., int|bool $stripteaser Optional. Default is 0., string $more_file Optional., int $cut Optional. Amount of words to keep for the content., int $encode_html Optional. How to encode the content., ","desc":"Display the post content for the feed."},"make_url_footnote":{"params":"string $content Content to get links, ","desc":"Strip HTML and put links at the bottom of stripped content."},"_c":{"params":"string $text Text to translate, string $domain Optional. Domain to retrieve the translated text, ","desc":"Retrieve translated string with vertical bar context"},"translate_with_context":{"params":"string $text Text to translate, string $domain Domain to retrieve the translated text, ","desc":"Translates $text like translate(), but assumes that the text contains a context after its last vertical bar."},"_nc":{"params":"","desc":"A version of _n(), which supports contexts."},"__ngettext":{"params":"","desc":"Retrieve the plural or single form based on the amount."},"__ngettext_noop":{"params":"","desc":"Register plural strings in POT file, but don&#039;t translate them."},"get_alloptions":{"params":"","desc":"Retrieve all autoload options, or all options if no autoloaded ones exist."},"get_the_attachment_link":{"params":"int $id Optional. Post ID., bool $fullsize Optional, default is false. Whether to use full size image., array $max_dims Optional. Max image dimensions., bool $permalink Optional, default is false. Whether to include permalink to image., ","desc":"Retrieve HTML content of attachment image with link."},"get_attachment_icon_src":{"params":"int $id Optional. Post ID., bool $fullsize Optional, default to false. Whether to have full image., ","desc":"Retrieve icon URL and Path."},"get_attachment_icon":{"params":"int $id Optional. Post ID., bool $fullsize Optional, default to false. Whether to have full size image., array $max_dims Optional. Dimensions of image., ","desc":"Retrieve HTML content of icon attachment image element."},"get_attachment_innerHTML":{"params":"int $id Optional. Post ID., bool $fullsize Optional, default to false. Whether to have full size image., array $max_dims Optional. Dimensions of image., ","desc":"Retrieve HTML content of image element."},"get_link":{"params":"int $bookmark_id ID of link, string $output OBJECT, ARRAY_N, or ARRAY_A, ","desc":"Retrieve bookmark data based on ID."},"sanitize_url":{"params":"string $url The URL to be cleaned., array $protocols An array of acceptable protocols., ","desc":"Performs esc_url() for database or redirect usage."},"clean_url":{"params":"string $url The URL to be cleaned., array $protocols Optional. An array of acceptable protocols., string $context Optional. How the URL will be used. Default is &#039;display&#039;., ","desc":"Checks and cleans a URL."},"js_escape":{"params":"string $text The text to be escaped., ","desc":"Escape single quotes, specialchar double quotes, and fix line endings."},"wp_specialchars":{"params":"","desc":"Escaping for HTML blocks."},"attribute_escape":{"params":"string $text , ","desc":"Escaping for HTML attributes."},"register_sidebar_widget":{"params":"string|int $name Widget ID., callback $output_callback Run when widget is called., string $classname Classname widget option., mixed $params,... Widget parameters., ","desc":"Register widget for sidebar with backwards compatibility."},"unregister_sidebar_widget":{"params":"int|string $id Widget ID., ","desc":"Alias of {@link wp_unregister_sidebar_widget()}."},"register_widget_control":{"params":"int|string $name Sidebar ID., callback $control_callback Widget control callback to display and process form., int $width Widget width., int $height Widget height., ","desc":"Registers widget control callback for customizing options."},"unregister_widget_control":{"params":"int|string $id Widget ID., ","desc":"Alias of {@link wp_unregister_widget_control()}."},"delete_usermeta":{"params":"int $user_id User ID., string $meta_key Metadata key., mixed $meta_value Metadata value., ","desc":"Remove user meta data."},"get_usermeta":{"params":"int $user_id User ID, string $meta_key Optional. Metadata key., ","desc":"Retrieve user metadata."},"update_usermeta":{"params":"int $user_id User ID, string $meta_key Metadata key., mixed $meta_value Metadata value., ","desc":"Update metadata of user."},"get_users_of_blog":{"params":"int $id Blog ID., ","desc":"Get users for the blog."},"automatic_feed_links":{"params":"boolean $add Optional, default is true. Add or remove links. Defaults to true., ","desc":"Enable/disable automatic general feed link outputting."},"get_profile":{"params":"","desc":"Retrieve user data based on field."},"get_usernumposts":{"params":"","desc":"Number of posts user has written."},"funky_javascript_callback":{"params":"array $matches Single Match, ","desc":"Callback used to change %uXXXX to &amp;#YYY; syntax"},"funky_javascript_fix":{"params":"string $text Text to be made safe., ","desc":"Fixes javascript bugs in browsers."},"is_taxonomy":{"params":"string $taxonomy Name of taxonomy object, ","desc":"Checks that the taxonomy name exists."},"is_term":{"params":"int|string $term The term to check, string $taxonomy The taxonomy name to use, int $parent ID of parent term under which to confine the exists search., ","desc":"Check if Term exists."},"is_plugin_page":{"params":"","desc":"Is the current admin page generated by a plugin?"},"update_category_cache":{"params":"","desc":"Update the categories cache."},"wp_timezone_supported":{"params":"","desc":"Check for PHP timezone support"},"the_editor":{"params":"string $content Textarea content., string $id Optional, default is &#039;content&#039;. HTML ID attribute value., string $prev_id Optional, not used, bool $media_buttons Optional, default is true. Whether to display media buttons., int $tab_index Optional, not used, ","desc":"Display editor: TinyMCE, HTML, or both."},"get_user_metavalues":{"params":"array $ids User ID numbers list., ","desc":"Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users"},"sanitize_user_object":{"params":"object|array $user The User Object or Array, string $context Optional, default is &#039;display&#039;. How to sanitize user fields., ","desc":"Sanitize every user field."},"get_boundary_post_rel_link":{"params":"string $title Optional. Link title format., bool $in_same_cat Optional. Whether link should be in a same category., string $excluded_categories Optional. Excluded categories IDs., bool $start Optional, default is true. Whether to display link to first or last post., ","desc":"Get boundary post relational link."},"start_post_rel_link":{"params":"string $title Optional. Link title format., bool $in_same_cat Optional. Whether link should be in a same category., string $excluded_categories Optional. Excluded categories IDs., ","desc":"Display relational link for the first post."},"get_index_rel_link":{"params":"","desc":"Get site index relational link."},"index_rel_link":{"params":"","desc":"Display relational link for the site index."},"get_parent_post_rel_link":{"params":"string $title Optional. Link title format., ","desc":"Get parent post relational link."},"parent_post_rel_link":{"params":"","desc":"Display relational link for parent item"},"wp_admin_bar_dashboard_view_site_menu":{"params":"","desc":"Add the &quot;Dashboard&quot;/&quot;Visit Site&quot; menu."},"is_blog_user":{"params":"int $blog_id Blog ID, ","desc":"Checks if the current user belong to a given blog."},"stripos":{"params":"","desc":""},"wp_print_styles":{"params":"array|bool $handles Styles to be printed. An empty array prints the queue, an array with one string prints that style, and an array of strings prints those styles., ","desc":"Display styles that are in the queue or part of $handles."},"wp_add_inline_style":{"params":"","desc":"Adds extra CSS."},"wp_register_style":{"params":"string $handle Name of the stylesheet., string|bool $src Path to the stylesheet from the root directory of WordPress. Example: &#039;/css/mystyle.css&#039;., array $deps Array of handles of any stylesheet that this stylesheet depends on. (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies., string|bool $ver String specifying the stylesheet version number. Set to NULL to disable. Used to ensure that the correct version is sent to the client regardless of caching., string $media The media for which this stylesheet has been defined., ","desc":"Register CSS style file."},"wp_deregister_style":{"params":"string $handle Name of the stylesheet., ","desc":"Remove a registered CSS file."},"wp_enqueue_style":{"params":"string $handle Name of the stylesheet., string|bool $src Path to the stylesheet from the root directory of WordPress. Example: &#039;/css/mystyle.css&#039;., array $deps Array of handles (names) of any stylesheet that this stylesheet depends on. (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies., string|bool $ver String specifying the stylesheet version number, if it has one. This parameter is used to ensure that the correct version is sent to the client regardless of caching, and so should be included if a version number is available and makes sense for the stylesheet., string $media The media for which this stylesheet has been defined., ","desc":"Enqueue a CSS style file."},"wp_dequeue_style":{"params":"","desc":"Remove an enqueued style."},"wp_style_is":{"params":"string $handle Name of the stylesheet., string $list Values are &#039;registered&#039;, &#039;done&#039;, &#039;queue&#039; and &#039;to_do&#039;., ","desc":"Check whether style has been added to WordPress Styles."},"redirect_canonical":{"params":"string $requested_url Optional. The URL that was requested, used to figure if redirect is needed., bool $do_redirect Optional. Redirect to the new URL., ","desc":"Redirects incoming links to the proper URL based on the site url."},"redirect_guess_404_permalink":{"params":"","desc":"Attempts to guess correct post based on query vars."},"wp_get_nav_menu_object":{"params":"string $menu Menu id, slug or name, ","desc":"Returns a navigation menu object."},"is_nav_menu":{"params":"int|string $menu The menu to check (id, slug, or name), ","desc":"Check if the given ID is a navigation menu."},"register_nav_menus":{"params":"array $locations Associative array of menu location identifiers (like a slug) and descriptive text., ","desc":"Register navigation menus for a theme."},"unregister_nav_menu":{"params":"array $location the menu location identifier, ","desc":"Unregisters a navigation menu for a theme."},"register_nav_menu":{"params":"string $location Menu location identifier, like a slug., string $description Menu location descriptive text., ","desc":"Register a navigation menu for a theme."},"get_registered_nav_menus":{"params":"","desc":"Returns an array of all registered navigation menus in a theme"},"get_nav_menu_locations":{"params":"","desc":"Returns an array with the registered navigation menu locations and the menu assigned to it"},"has_nav_menu":{"params":"string $location Menu location identifier., ","desc":"Whether a registered nav menu location has a menu assigned to it."},"is_nav_menu_item":{"params":"int $menu_item_id The ID of the potential nav menu item., ","desc":"Determine whether the given ID is a nav menu item."},"wp_create_nav_menu":{"params":"string $menu_name Menu Name, ","desc":"Create a Navigation Menu."},"wp_delete_nav_menu":{"params":"string $menu name|id|slug, ","desc":"Delete a Navigation Menu."},"wp_update_nav_menu_object":{"params":"int $menu_id The ID of the menu or &quot;0&quot; to create a new menu., array $menu_data The array of menu data., ","desc":"Save the properties of a menu or create a new menu with those properties."},"wp_update_nav_menu_item":{"params":"int $menu_id The ID of the menu. Required. If &quot;0&quot;, makes the menu item a draft orphan., int $menu_item_db_id The ID of the menu item. If &quot;0&quot;, creates a new menu item., array $menu_item_data The menu item&#039;s data., ","desc":"Save the properties of a menu item or create a new one."},"wp_get_nav_menus":{"params":"array $args Array of arguments passed on to get_terms()., ","desc":"Returns all navigation menu objects."},"_sort_nav_menu_items":{"params":"object $a The first object to compare, object $b The second object to compare, ","desc":"Sort menu items by the desired key."},"_is_valid_nav_menu_item":{"params":"object $menu_item The menu item to check, ","desc":"Returns if a menu item is valid. Bug #13958"},"wp_get_nav_menu_items":{"params":"string $menu menu name, id, or slug, string $args , ","desc":"Returns all menu items of a navigation menu."},"wp_setup_nav_menu_item":{"params":"object $menu_item The menu item to modify., ","desc":"Decorates a menu item object with the shared navigation menu item properties."},"wp_get_associated_nav_menu_items":{"params":"int $object_id The ID of the original object., string $object_type The type of object, such as &quot;taxonomy&quot; or &quot;post_type.&quot;, ","desc":"Get the menu items associated with a particular object."},"_wp_delete_post_menu_item":{"params":"int $object_id The ID of the original object being trashed., ","desc":"Callback for handling a menu item when its original object is deleted."},"_wp_delete_tax_menu_item":{"params":"int $object_id The ID of the original object being trashed., ","desc":"Callback for handling a menu item when its original object is deleted."},"_wp_auto_add_pages_to_menu":{"params":"string $new_status The new status of the post object., string $old_status The old status of the post object., object $post The post object being transitioned from one status to another., ","desc":"Automatically add newly published page objects to menus with that as an option."},"wp_unregister_GLOBALS":{"params":"","desc":"Turn register globals off."},"wp_fix_server_vars":{"params":"","desc":"Fix $_SERVER variables for various setups."},"wp_check_php_mysql_versions":{"params":"","desc":"Check for the required PHP version, and the MySQL extension or a database drop-in."},"wp_favicon_request":{"params":"","desc":"Don&#039;t load all of WordPress when handling a favicon.ico request."},"wp_maintenance":{"params":"","desc":"Dies with a maintenance message when conditions are met."},"timer_start":{"params":"","desc":"PHP 4 standard microtime start capture."},"timer_stop":{"params":"int $display Use &#039;0&#039; or null to not echo anything and 1 to echo the total time, int $precision The amount of digits from the right of the decimal to display. Default is 3., ","desc":"Return and/or display the time from the page start to when function is called."},"wp_debug_mode":{"params":"","desc":"Sets PHP error handling and handles WordPress debug mode."},"wp_set_lang_dir":{"params":"","desc":"Sets the location of the language directory."},"require_wp_db":{"params":"","desc":"Load the correct database class file."},"wp_set_wpdb_vars":{"params":"","desc":"Sets the database table prefix and the format specifiers for database table columns."},"wp_start_object_cache":{"params":"","desc":"Starts the WordPress object cache."},"wp_not_installed":{"params":"","desc":"Redirects to the installer if WordPress is not installed."},"wp_get_mu_plugins":{"params":"","desc":"Returns array of must-use plugin files to be included in global scope."},"wp_get_active_and_valid_plugins":{"params":"","desc":"Returns array of plugin files to be included in global scope."},"wp_set_internal_encoding":{"params":"","desc":"Sets internal encoding using mb_internal_encoding()."},"wp_magic_quotes":{"params":"","desc":"Add magic quotes to $_GET, $_POST, $_COOKIE, and $_SERVER."},"shutdown_action_hook":{"params":"","desc":"Runs just before PHP shuts down execution."},"wp_clone":{"params":"object $object The object to clone, ","desc":"Copy an object."},"is_admin":{"params":"","desc":"Whether the current request is for a network or blog admin page"},"is_blog_admin":{"params":"","desc":"Whether the current request is for a blog admin screen /wp-admin/"},"is_network_admin":{"params":"","desc":"Whether the current request is for a network admin screen /wp-admin/network/"},"is_user_admin":{"params":"","desc":"Whether the current request is for a user admin screen /wp-admin/user/"},"is_multisite":{"params":"","desc":"Whether Multisite support is enabled"},"wp_schedule_single_event":{"params":"int $timestamp Timestamp for when to run the event., string $hook Action hook to execute when cron is run., array $args Optional. Arguments to pass to the hook&#039;s callback function., ","desc":"Schedules a hook to run only once."},"wp_schedule_event":{"params":"int $timestamp Timestamp for when to run the event., string $recurrence How often the event should recur., string $hook Action hook to execute when cron is run., array $args Optional. Arguments to pass to the hook&#039;s callback function., ","desc":"Schedule a periodic event."},"wp_reschedule_event":{"params":"int $timestamp Timestamp for when to run the event., string $recurrence How often the event should recur., string $hook Action hook to execute when cron is run., array $args Optional. Arguments to pass to the hook&#039;s callback function., ","desc":"Reschedule a recurring event."},"wp_unschedule_event":{"params":"int $timestamp Timestamp for when to run the event., string $hook Action hook, the execution of which will be unscheduled., array $args Arguments to pass to the hook&#039;s callback function. Although not passed to a callback function, these arguments are used to uniquely identify the scheduled event, so they should be the same as those used when originally scheduling the event., ","desc":"Unschedule a previously scheduled cron job."},"wp_clear_scheduled_hook":{"params":"string $hook Action hook, the execution of which will be unscheduled., array $args Optional. Arguments that were to be pass to the hook&#039;s callback function., ","desc":"Unschedule all cron jobs attached to a specific hook."},"wp_next_scheduled":{"params":"string $hook Action hook to execute when cron is run., array $args Optional. Arguments to pass to the hook&#039;s callback function., ","desc":"Retrieve the next timestamp for a cron event."},"spawn_cron":{"params":"","desc":"Send request to run cron through HTTP request that doesn&#039;t halt page loading."},"wp_cron":{"params":"","desc":"Run scheduled callbacks or spawn cron for all scheduled events."},"wp_get_schedules":{"params":"","desc":"Retrieve supported and filtered Cron recurrences."},"wp_get_schedule":{"params":"string $hook Action hook to execute when cron is run., array $args Optional. Arguments to pass to the hook&#039;s callback function., ","desc":"Retrieve Cron schedule for hook with arguments."},"_get_cron_array":{"params":"","desc":"Retrieve cron info array option."},"_set_cron_array":{"params":"array $cron Cron info array from {@link _get_cron_array()}., ","desc":"Updates the CRON option with the new CRON array."},"_upgrade_cron_array":{"params":"array $cron Cron info array from {@link _get_cron_array()}., ","desc":"Upgrade a Cron info array."},"_wp_oembed_get_object":{"params":"","desc":"Returns the initialized {@link WP_oEmbed} object"},"get_locale":{"params":"","desc":"Gets the current locale."},"translate":{"params":"string $text Text to translate., string $domain Domain to retrieve the translated text., ","desc":"Retrieves the translation of $text. If there is no translation, or the domain isn&#039;t loaded, the original text is returned."},"before_last_bar":{"params":"","desc":""},"translate_with_gettext_context":{"params":"","desc":""},"__":{"params":"string $text Text to translate, string $domain Optional. Domain to retrieve the translated text, ","desc":"Retrieves the translation of $text. If there is no translation, or the domain isn&#039;t loaded, the original text is returned."},"esc_attr__":{"params":"string $text Text to translate, string $domain Optional. Domain to retrieve the translated text, ","desc":"Retrieves the translation of $text and escapes it for safe use in an attribute."},"esc_html__":{"params":"string $text Text to translate, string $domain Optional. Domain to retrieve the translated text, ","desc":"Retrieves the translation of $text and escapes it for safe use in HTML output."},"_e":{"params":"string $text Text to translate, string $domain Optional. Domain to retrieve the translated text, ","desc":"Displays the returned translated text from translate()."},"esc_attr_e":{"params":"string $text Text to translate, string $domain Optional. Domain to retrieve the translated text, ","desc":"Displays translated text that has been escaped for safe use in an attribute."},"esc_html_e":{"params":"string $text Text to translate, string $domain Optional. Domain to retrieve the translated text, ","desc":"Displays translated text that has been escaped for safe use in HTML output."},"_x":{"params":"string $text Text to translate, string $context Context information for the translators, string $domain Optional. Domain to retrieve the translated text, ","desc":"Retrieve translated string with gettext context"},"_ex":{"params":"string $text Text to translate, string $context Context information for the translators, string $domain Optional. Domain to retrieve the translated text, ","desc":"Displays translated string with gettext context"},"esc_attr_x":{"params":"","desc":""},"esc_html_x":{"params":"","desc":""},"_n":{"params":"string $single The text that will be used if $number is 1, string $plural The text that will be used if $number is not 1, int $number The number to compare against to use either $single or $plural, string $domain Optional. The domain identifier the text should be retrieved in, ","desc":"Retrieve the plural or single form based on the amount."},"_nx":{"params":"","desc":"A hybrid of _n() and _x(). It supports contexts and plurals."},"_n_noop":{"params":"string $singular Single form to be i18ned, string $plural Plural form to be i18ned, ","desc":"Register plural strings in POT file, but don&#039;t translate them."},"_nx_noop":{"params":"","desc":"Register plural strings with context in POT file, but don&#039;t translate them."},"translate_nooped_plural":{"params":"array $nooped_plural Array with singular, plural and context keys, usually the result of _n_noop() or _nx_noop(), int $count Number of objects, string $domain Optional. The domain identifier the text should be retrieved in, ","desc":"Translate the result of _n_noop() or _nx_noop()"},"load_textdomain":{"params":"string $domain Unique identifier for retrieving translated strings, string $mofile Path to the .mo file, ","desc":"Loads a MO file into the domain $domain."},"unload_textdomain":{"params":"string $domain Textdomain to be unloaded, ","desc":"Unloads translations for a domain"},"load_default_textdomain":{"params":"","desc":"Loads default translated strings based on locale."},"load_plugin_textdomain":{"params":"string $domain Unique identifier for retrieving translated strings, string $abs_rel_path Optional. Relative path to ABSPATH of a folder, where the .mo file resides. Deprecated, but still functional until 2.7, string $plugin_rel_path Optional. Relative path to WP_PLUGIN_DIR. This is the preferred argument to use. It takes precedence over $abs_rel_path, ","desc":"Loads the plugin&#039;s translated strings."},"load_muplugin_textdomain":{"params":"string $domain Unique identifier for retrieving translated strings, string $mu_plugin_rel_path Relative to WPMU_PLUGIN_DIR directory in which the MO file resides. Defaults to empty string., ","desc":"Load the translated strings for a plugin residing in the mu-plugins dir."},"load_theme_textdomain":{"params":"string $domain Unique identifier for retrieving translated strings, ","desc":"Loads the theme&#039;s translated strings."},"load_child_theme_textdomain":{"params":"string $domain Unique identifier for retrieving translated strings, ","desc":"Loads the child themes translated strings."},"get_translations_for_domain":{"params":"string $domain , ","desc":"Returns the Translations instance for a domain. If there isn&#039;t one, returns empty Translations instance."},"is_textdomain_loaded":{"params":"string $domain , ","desc":"Whether there are translations for the domain"},"translate_user_role":{"params":"","desc":"Translates role name. Since the role names are in the database and not in the source there are dummy gettext calls to get them into the POT file and this function properly translates them back."},"get_available_languages":{"params":"string $dir A directory in which to search for language files. The default directory is WP_LANG_DIR., ","desc":"Get all available languages based on the presence of *.mo files in a given directory. The default directory is WP_LANG_DIR."},"add_filter":{"params":"string $tag The name of the filter to hook the $function_to_add to., callback $function_to_add The name of the function to be called when the filter is applied., int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action., int $accepted_args optional. The number of arguments the function accept (default 1)., ","desc":"Hooks a function or method to a specific filter action."},"has_filter":{"params":"string $tag The name of the filter hook., callback $function_to_check optional. If specified, return the priority of that function on this hook or false if not attached., ","desc":"Check if any filter has been registered for a hook."},"apply_filters":{"params":"string $tag The name of the filter hook., mixed $value The value on which the filters hooked to &lt;tt&gt;$tag&lt;/tt&gt; are applied on., mixed $var,... Additional variables passed to the functions hooked to &lt;tt&gt;$tag&lt;/tt&gt;., ","desc":"Call the functions added to a filter hook."},"apply_filters_ref_array":{"params":"string $tag The name of the filter hook., array $args The arguments supplied to the functions hooked to &lt;tt&gt;$tag&lt;/tt&gt;, ","desc":"Execute functions hooked on a specific filter hook, specifying arguments in an array."},"remove_filter":{"params":"string $tag The filter hook to which the function to be removed is hooked., callback $function_to_remove The name of the function which should be removed., int $priority optional. The priority of the function (default: 10)., int $accepted_args optional. The number of arguments the function accepts (default: 1)., ","desc":"Removes a function from a specified filter hook."},"remove_all_filters":{"params":"string $tag The filter to remove hooks from., int $priority The priority number to remove., ","desc":"Remove all of the hooks from a filter."},"current_filter":{"params":"","desc":"Retrieve the name of the current filter or action."},"add_action":{"params":"string $tag The name of the action to which the $function_to_add is hooked., callback $function_to_add The name of the function you wish to be called., int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action., int $accepted_args optional. The number of arguments the function accept (default 1)., ","desc":"Hooks a function on to a specific action."},"do_action":{"params":"string $tag The name of the action to be executed., mixed $arg,... Optional additional arguments which are passed on to the functions hooked to the action., ","desc":"Execute functions hooked on a specific action hook."},"did_action":{"params":"string $tag The name of the action hook., ","desc":"Retrieve the number of times an action is fired."},"do_action_ref_array":{"params":"string $tag The name of the action to be executed., array $args The arguments supplied to the functions hooked to &lt;tt&gt;$tag&lt;/tt&gt;, ","desc":"Execute functions hooked on a specific action hook, specifying arguments in an array."},"has_action":{"params":"string $tag The name of the action hook., callback $function_to_check optional. If specified, return the priority of that function on this hook or false if not attached., ","desc":"Check if any action has been registered for a hook."},"remove_action":{"params":"string $tag The action hook to which the function to be removed is hooked., callback $function_to_remove The name of the function which should be removed., int $priority optional The priority of the function (default: 10)., int $accepted_args optional. The number of arguments the function accepts (default: 1)., ","desc":"Removes a function from a specified action hook."},"remove_all_actions":{"params":"string $tag The action to remove hooks from., int $priority The priority number to remove them from., ","desc":"Remove all of the hooks from an action."},"plugin_basename":{"params":"string $file The filename of plugin., ","desc":"Gets the basename of a plugin."},"plugin_dir_path":{"params":"string $file The filename of the plugin (__FILE__), ","desc":"Gets the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in"},"plugin_dir_url":{"params":"string $file The filename of the plugin (__FILE__), ","desc":"Gets the URL directory path (with trailing slash) for the plugin __FILE__ passed in"},"register_activation_hook":{"params":"string $file The filename of the plugin including the path., callback $function the function hooked to the &#039;activate_PLUGIN&#039; action., ","desc":"Set the activation hook for a plugin."},"register_deactivation_hook":{"params":"string $file The filename of the plugin including the path., callback $function the function hooked to the &#039;activate_PLUGIN&#039; action., ","desc":"Set the deactivation hook for a plugin."},"register_uninstall_hook":{"params":"string $file , callback $callback The callback to run when the hook is called. Must be a static method or function., ","desc":"Set the uninstallation hook for a plugin."},"_wp_call_all_hook":{"params":"array $args The collected parameters from the hook that was called., string $hook Optional. The hook name that was used to call the &#039;all&#039; hook., ","desc":"Calls the &#039;all&#039; hook, which will process the functions hooked into it."},"_wp_filter_build_unique_id":{"params":"string $tag Used in counting how many hooks were applied, callback $function Used for creating unique id, int|bool $priority Used in counting how many hooks were applied. If === false and $function is an object reference, we return the unique id only if it already has one, false otherwise., ","desc":"Build Unique ID for storage and retrieval."},"generate_random_password":{"params":"","desc":""},"is_site_admin":{"params":"","desc":"Determine if user is a site admin."},"graceful_fail":{"params":"","desc":""},"get_user_details":{"params":"","desc":""},"clear_global_post_cache":{"params":"","desc":""},"is_main_blog":{"params":"","desc":""},"validate_email":{"params":"","desc":""},"get_blog_list":{"params":"","desc":""},"get_most_active_blogs":{"params":"","desc":""},"wpmu_admin_do_redirect":{"params":"string $url , ","desc":"Redirect a user based on $_GET or $_POST arguments."},"wpmu_admin_redirect_add_updated_param":{"params":"string $url , ","desc":"Adds an &#039;updated=true&#039; argument to a URL."},"has_post_thumbnail":{"params":"int $post_id Optional. Post ID., ","desc":"Check if post has an image attached."},"get_post_thumbnail_id":{"params":"int $post_id Optional. Post ID., ","desc":"Retrieve Post Thumbnail ID."},"the_post_thumbnail":{"params":"int $size Optional. Image size. Defaults to &#039;post-thumbnail&#039;, which theme sets using set_post_thumbnail_size( $width, $height, $crop_flag );., string|array $attr Optional. Query string or array of attributes., ","desc":"Display Post Thumbnail."},"update_post_thumbnail_cache":{"params":"","desc":"Update cache for thumbnails in the current loop"},"get_the_post_thumbnail":{"params":"int $post_id Optional. Post ID., string $size Optional. Image size. Defaults to &#039;thumbnail&#039;., string|array $attr Optional. Query string or array of attributes., ","desc":"Retrieve Post Thumbnail."},"wp_version_check":{"params":"","desc":"Check WordPress version against the newest version."},"wp_update_plugins":{"params":"","desc":"Check plugin versions against the latest versions hosted on WordPress.org."},"wp_update_themes":{"params":"","desc":"Check theme versions against the latest versions hosted on WordPress.org."},"wp_get_update_data":{"params":"","desc":""},"_maybe_update_core":{"params":"","desc":""},"_maybe_update_plugins":{"params":"","desc":"Check the last time plugins were run before checking plugin versions."},"_maybe_update_themes":{"params":"","desc":"Check themes versions only after a duration of time."},"wp_schedule_update_checks":{"params":"","desc":"Schedule core, theme, and plugin update checks."},"_wp_admin_bar_init":{"params":"","desc":"Instantiate the admin bar object and set it up as a global for access elsewhere."},"wp_admin_bar_render":{"params":"","desc":"Render the admin bar to the page based on the $wp_admin_bar-&gt;menu member var."},"wp_admin_bar_wp_menu":{"params":"","desc":"Add the WordPress logo menu."},"wp_admin_bar_my_account_item":{"params":"","desc":"Add the &quot;My Account&quot; item."},"wp_admin_bar_my_account_menu":{"params":"","desc":"Add the &quot;My Account&quot; submenu items."},"wp_admin_bar_site_menu":{"params":"","desc":"Add the &quot;Site Name&quot; menu."},"wp_admin_bar_my_sites_menu":{"params":"","desc":"Add the &quot;My Sites/[Site Name]&quot; menu and all submenus."},"wp_admin_bar_shortlink_menu":{"params":"","desc":"Provide a shortlink."},"wp_admin_bar_edit_menu":{"params":"","desc":"Provide an edit link for posts and terms."},"wp_admin_bar_new_content_menu":{"params":"","desc":"Add &quot;Add New&quot; menu."},"wp_admin_bar_comments_menu":{"params":"","desc":"Add edit comments link with awaiting moderation count bubble."},"wp_admin_bar_appearance_menu":{"params":"","desc":"Add appearance submenu items to the &quot;Site Name&quot; menu."},"wp_admin_bar_updates_menu":{"params":"","desc":"Provide an update link if theme/plugin/core updates are available."},"wp_admin_bar_search_menu":{"params":"","desc":"Add search form."},"wp_admin_bar_add_secondary_groups":{"params":"","desc":"Add secondary menus."},"wp_admin_bar_header":{"params":"","desc":"Style and scripts for the admin bar."},"_admin_bar_bump_cb":{"params":"","desc":"Default admin bar callback."},"show_admin_bar":{"params":"bool $show Whether to allow the admin bar to show., ","desc":"Set the display status of the admin bar."},"is_admin_bar_showing":{"params":"","desc":"Determine whether the admin bar should be showing."},"_get_admin_bar_pref":{"params":"string $context Context of this preference check. Defaults to &#039;front&#039;. The &#039;admin&#039; preference is no longer used., int $user Optional. ID of the user to check, defaults to 0 for current user., ","desc":"Retrieve the admin bar display preference of a user."},"map_meta_cap":{"params":"string $cap Capability name., int $user_id User ID., ","desc":"Map meta capabilities to primitive capabilities."},"current_user_can":{"params":"string $capability Capability or role name., ","desc":"Whether current user has capability or role."},"current_user_can_for_blog":{"params":"int $blog_id Blog ID, string $capability Capability or role name., ","desc":"Whether current user has a capability or role for a given blog."},"author_can":{"params":"int|object $post Post ID or post object., string $capability Capability or role name., ","desc":"Whether author of supplied post has capability or role."},"user_can":{"params":"int|object $user User ID or object., string $capability Capability or role name., ","desc":"Whether a particular user has capability or role."},"get_role":{"params":"string $role Role name., ","desc":"Retrieve role object."},"add_role":{"params":"string $role Role name., string $display_name Display name for role., array $capabilities List of capabilities, e.g. array( &#039;edit_posts&#039; =&gt; true, &#039;delete_posts&#039; =&gt; false );, ","desc":"Add role, if it does not exist."},"remove_role":{"params":"string $role Role name., ","desc":"Remove role, if it exists."},"get_super_admins":{"params":"","desc":"Retrieve a list of super admins."},"is_super_admin":{"params":"int $user_id (Optional) The ID of a user. Defaults to the current user., ","desc":"Determine if user is a site admin."},"the_ID":{"params":"","desc":"Display the ID of the current item in the WordPress Loop."},"get_the_ID":{"params":"","desc":"Retrieve the ID of the current item in the WordPress Loop."},"the_title":{"params":"string $before Optional. Content to prepend to the title., string $after Optional. Content to append to the title., bool $echo Optional, default to true.Whether to display or return., ","desc":"Display or retrieve the current post title with optional content."},"the_title_attribute":{"params":"string|array $args Optional. Override the defaults., ","desc":"Sanitize the current title when retrieving or displaying."},"get_the_title":{"params":"int $id Optional. Post ID., ","desc":"Retrieve post title."},"the_guid":{"params":"int $id Optional. Post ID., ","desc":"Display the Post Global Unique Identifier (guid)."},"get_the_guid":{"params":"int $id Optional. Post ID., ","desc":"Retrieve the Post Global Unique Identifier (guid)."},"the_content":{"params":"string $more_link_text Optional. Content for when there is more text., bool $stripteaser Optional. Strip teaser content before the more text. Default is false., ","desc":"Display the post content."},"get_the_content":{"params":"string $more_link_text Optional. Content for when there is more text., bool $stripteaser Optional. Strip teaser content before the more text. Default is false., ","desc":"Retrieve the post content."},"_convert_urlencoded_to_entities":{"params":"array $match Match array from preg_replace_callback, ","desc":"Preview fix for javascript bug with foreign languages"},"the_excerpt":{"params":"","desc":"Display the post excerpt."},"get_the_excerpt":{"params":"mixed $deprecated Not used., ","desc":"Retrieve the post excerpt."},"has_excerpt":{"params":"int $id Optional. Post ID., ","desc":"Whether post has excerpt."},"post_class":{"params":"string|array $class One or more classes to add to the class list., int $post_id An optional post ID., ","desc":"Display the classes for the post div."},"get_post_class":{"params":"string|array $class One or more classes to add to the class list., int $post_id An optional post ID., ","desc":"Retrieve the classes for the post div as an array."},"body_class":{"params":"string|array $class One or more classes to add to the class list., ","desc":"Display the classes for the body element."},"get_body_class":{"params":"string|array $class One or more classes to add to the class list., ","desc":"Retrieve the classes for the body element as an array."},"post_password_required":{"params":"int|object $post An optional post. Global $post used if not provided., ","desc":"Whether post requires password and correct password has been provided."},"sticky_class":{"params":"int $post_id An optional post ID., ","desc":"Display &quot;sticky&quot; CSS class, if a post is sticky."},"wp_link_pages":{"params":"string|array $args Optional. Overwrite the defaults., ","desc":"The formatted output of a list of pages."},"_wp_link_page":{"params":"int $i Page number., ","desc":"Helper function for wp_link_pages()."},"post_custom":{"params":"string $key Meta data key name., ","desc":"Retrieve post custom meta data field."},"the_meta":{"params":"","desc":"Display list of post custom fields."},"wp_dropdown_pages":{"params":"array|string $args Optional. Override default arguments., ","desc":"Retrieve or display list of pages as a dropdown (select list)."},"wp_list_pages":{"params":"array|string $args Optional. Override default arguments., ","desc":"Retrieve or display list of pages in list (li) format."},"wp_page_menu":{"params":"array|string $args , ","desc":"Display or retrieve list of pages with optional home link."},"walk_page_tree":{"params":"","desc":"Retrieve HTML list content for page list."},"walk_page_dropdown_tree":{"params":"","desc":"Retrieve HTML dropdown (select) content for page list."},"the_attachment_link":{"params":"int $id Optional. Post ID., bool $fullsize Optional, default is false. Whether to use full size., bool $deprecated Deprecated. Not used., bool $permalink Optional, default is false. Whether to include permalink., ","desc":"Display an attachment page link using an image or icon."},"wp_get_attachment_link":{"params":"int $id Optional. Post ID., string $size Optional, default is &#039;thumbnail&#039;. Size of image, either array or string., bool $permalink Optional, default is false. Whether to add permalink to image., bool $icon Optional, default is false. Whether to include icon., string $text Optional, default is false. If string, then will be link text., ","desc":"Retrieve an attachment page link using an image or icon, if possible."},"prepend_attachment":{"params":"string $content , ","desc":"Wrap attachment in &lt;&lt;p&gt;&gt; element before content."},"get_the_password_form":{"params":"","desc":"Retrieve protected post password form content."},"is_page_template":{"params":"string $template The specific template name if specific matching is required., ","desc":"Whether currently in a page template."},"wp_post_revision_title":{"params":"int|object $revision Revision ID or revision object., bool $link Optional, default is true. Link to revisions&#039;s page?, ","desc":"Retrieve formatted date timestamp of a revision (linked to that revisions&#039;s page)."},"wp_list_post_revisions":{"params":"int|object $post_id Post ID or post object., string|array $args See description {@link wp_parse_args()}., ","desc":"Display list of a post&#039;s revisions."},"get_bookmark":{"params":"mixed $bookmark , string $output Optional. Either OBJECT, ARRAY_N, or ARRAY_A constant, string $filter Optional, default is &#039;raw&#039;., ","desc":"Retrieve Bookmark data"},"get_bookmark_field":{"params":"string $field The name of the data field to return, int $bookmark The bookmark ID to get field, string $context Optional. The context of how the field will be used., ","desc":"Retrieve single bookmark data item or field."},"get_bookmarks":{"params":"string|array $args List of arguments to overwrite the defaults, ","desc":"Retrieves the list of bookmarks"},"sanitize_bookmark":{"params":"object|array $bookmark Bookmark row, string $context Optional, default is &#039;display&#039;. How to filter the fields, ","desc":"Sanitizes all bookmark fields"},"sanitize_bookmark_field":{"params":"string $field The bookmark field, mixed $value The bookmark field value, int $bookmark_id Bookmark ID, string $context How to filter the field value. Either &#039;raw&#039;, &#039;edit&#039;, &#039;attribute&#039;, &#039;js&#039;, &#039;db&#039;, or &#039;display&#039;, ","desc":"Sanitizes a bookmark field"},"clean_bookmark_cache":{"params":"","desc":"Deletes bookmark cache"},"register_widget":{"params":"string $widget_class The name of a class that extends WP_Widget, ","desc":"Register a widget"},"unregister_widget":{"params":"string $widget_class The name of a class that extends WP_Widget, ","desc":"Unregister a widget"},"register_sidebars":{"params":"int $number Number of sidebars to create., string|array $args Builds Sidebar based off of &#039;name&#039; and &#039;id&#039; values., ","desc":"Creates multiple sidebars."},"register_sidebar":{"params":"string|array $args Builds Sidebar based off of &#039;name&#039; and &#039;id&#039; values, ","desc":"Builds the definition for a single sidebar and returns the ID."},"unregister_sidebar":{"params":"string $name The ID of the sidebar when it was added., ","desc":"Removes a sidebar from the list."},"wp_register_sidebar_widget":{"params":"int|string $id Widget ID., string $name Widget display title., callback $output_callback Run when widget is called., array|string $options Optional. Widget Options., mixed $params,... Widget parameters to add to widget., ","desc":"Register widget for use in sidebars."},"wp_widget_description":{"params":"int|string $id Widget ID., ","desc":"Retrieve description for widget."},"wp_sidebar_description":{"params":"int|string $id sidebar ID., ","desc":"Retrieve description for a sidebar."},"wp_unregister_sidebar_widget":{"params":"int|string $id Widget ID., ","desc":"Remove widget from sidebar."},"wp_register_widget_control":{"params":"int|string $id Sidebar ID., string $name Sidebar display name., callback $control_callback Run when sidebar is displayed., array|string $options Optional. Widget options. See above long description., mixed $params,... Optional. Additional parameters to add to widget., ","desc":"Registers widget control callback for customizing options."},"_register_widget_update_callback":{"params":"","desc":""},"_register_widget_form_callback":{"params":"","desc":""},"wp_unregister_widget_control":{"params":"int|string $id Widget ID., ","desc":"Remove control callback for widget."},"dynamic_sidebar":{"params":"int|string $index Optional, default is 1. Name or ID of dynamic sidebar., ","desc":"Display dynamic sidebar."},"is_active_widget":{"params":"string $callback Optional, Widget callback to check., int $widget_id Optional, but needed for checking. Widget ID., string $id_base Optional, the base ID of a widget created by extending WP_Widget., bool $skip_inactive Optional, whether to check in &#039;wp_inactive_widgets&#039;., ","desc":"Whether widget is displayed on the front-end."},"is_dynamic_sidebar":{"params":"","desc":"Whether the dynamic sidebar is enabled and used by theme."},"is_active_sidebar":{"params":"mixed $index Sidebar name, id or number to check., ","desc":"Whether a sidebar is in use."},"wp_get_sidebars_widgets":{"params":"bool $deprecated Not used (deprecated)., ","desc":"Retrieve full list of sidebars and their widgets."},"wp_set_sidebars_widgets":{"params":"array $sidebars_widgets Sidebar widgets and their settings., ","desc":"Set the sidebar widget option to update sidebars."},"wp_get_widget_defaults":{"params":"","desc":"Retrieve default registered sidebars list."},"wp_convert_widget_settings":{"params":"","desc":"Convert the widget settings from single to multi-widget format."},"the_widget":{"params":"string $widget the widget&#039;s PHP class name (see default-widgets.php), array $instance the widget&#039;s instance settings, array $args the widget&#039;s sidebar args, ","desc":"Output an arbitrary widget as a template tag"},"_get_widget_id_base":{"params":"","desc":"Private"},"_wp_sidebars_changed":{"params":"","desc":"Handle sidebars config after theme change"},"retrieve_widgets":{"params":"","desc":""},"wp_nav_menu":{"params":"array $args Arguments, ","desc":"Displays a navigation menu."},"_wp_menu_item_classes_by_context":{"params":"array $menu_items The current menu item objects to which to add the class property information., ","desc":"Add the class property classes for the current context, if applicable."},"walk_nav_menu_tree":{"params":"","desc":"Retrieve the HTML list content for nav menu items."},"_nav_menu_item_id_use_once":{"params":"","desc":"Prevents a menu item ID from being used more than once."},"wp_default_scripts":{"params":"object $scripts WP_Scripts object., ","desc":"Register all WordPress scripts."},"wp_default_styles":{"params":"object $styles , ","desc":"Assign default styles to $styles object."},"wp_prototype_before_jquery":{"params":"array $js_array JavaScript scripts array, ","desc":"Reorder JavaScript scripts array to place prototype before jQuery."},"wp_just_in_time_script_localization":{"params":"","desc":"Load localized data on print rather than initialization."},"wp_style_loader_src":{"params":"string $src Source URL., string $handle Either &#039;colors&#039; or &#039;colors-rtl&#039;., ","desc":"Administration Screen CSS for changing the styles."},"print_head_scripts":{"params":"","desc":"Prints the script queue in the HTML head on admin pages."},"print_footer_scripts":{"params":"","desc":"Prints the scripts that were queued for the footer or too late for the HTML head."},"_print_scripts":{"params":"","desc":""},"wp_print_head_scripts":{"params":"","desc":"Prints the script queue in the HTML head on the front end."},"_wp_footer_scripts":{"params":"","desc":"Private, for use in *_footer_scripts hooks"},"wp_print_footer_scripts":{"params":"","desc":"Hooks to print the scripts and styles in the footer."},"wp_enqueue_scripts":{"params":"","desc":"Wrapper for do_action(&#039;wp_enqueue_scripts&#039;)"},"print_admin_styles":{"params":"","desc":"Prints the styles queue in the HTML head on admin pages."},"print_late_styles":{"params":"","desc":"Prints the styles that were queued too late for the HTML head."},"_print_styles":{"params":"","desc":""},"script_concat_settings":{"params":"","desc":"Determine the concatenation and compression settings for scripts and styles."},"getRequestParam":{"params":"String $name Name of parameter to get., String $default_value Default value to return if value not found., ","desc":"Returns an request value by name without magic quoting."},"getLogger":{"params":"","desc":""},"debug":{"params":"","desc":""},"info":{"params":"","desc":""},"error":{"params":"","desc":""},"warn":{"params":"","desc":""},"fatal":{"params":"","desc":""},"mce_escape":{"params":"","desc":""},"get_file":{"params":"","desc":""},"wp_signon":{"params":"array $credentials Optional. User info in order to sign on., bool $secure_cookie Optional. Whether to use secure cookie., ","desc":"Authenticate user with remember capability."},"wp_authenticate_username_password":{"params":"","desc":""},"wp_authenticate_cookie":{"params":"","desc":"Authenticate the user using the WordPress auth cookie."},"count_user_posts":{"params":"int $userid User ID., ","desc":"Number of posts user has written."},"count_many_users_posts":{"params":"array $user_ids Array of user IDs., string|array $post_type Optional. Post type to check. Defaults to post., ","desc":"Number of posts written by a list of users."},"user_pass_ok":{"params":"string $user_login User name., string $user_pass User password., ","desc":"Check that the user login name and password is correct."},"get_current_user_id":{"params":"","desc":"Get the current user&#039;s ID"},"get_user_option":{"params":"string $option User option name., int $user Optional. User ID., bool $deprecated Use get_option() to check for an option in the options table., ","desc":"Retrieve user option that can be either per Site or per Network."},"update_user_option":{"params":"int $user_id User ID, string $option_name User option name., mixed $newvalue User option value., bool $global Optional. Whether option name is global or blog specific. Default false (blog specific)., ","desc":"Update user option with global blog capability."},"delete_user_option":{"params":"int $user_id User ID, string $option_name User option name., bool $global Optional. Whether option name is global or blog specific. Default false (blog specific)., ","desc":"Delete user option with global blog capability."},"get_users":{"params":"array $args Optional., ","desc":"Retrieve list of users matching criteria."},"get_blogs_of_user":{"params":"int $user_id User ID, bool $all Whether to retrieve all blogs, or only blogs that are not marked as deleted, archived, or spam., ","desc":"Get the blogs a user belongs to."},"is_user_member_of_blog":{"params":"int $user_id The unique ID of the user, int $blog Optional. If no blog_id is provided, current site is used, ","desc":"Find out whether a user is a member of a given blog."},"add_user_meta":{"params":"int $user_id Post ID., string $meta_key Metadata name., mixed $meta_value Metadata value., bool $unique Optional, default is false. Whether the same key should not be added., ","desc":"Add meta data field to a user."},"delete_user_meta":{"params":"int $user_id user ID, string $meta_key Metadata name., mixed $meta_value Optional. Metadata value., ","desc":"Remove metadata matching criteria from a user."},"get_user_meta":{"params":"int $user_id Post ID., string $key The meta key to retrieve., bool $single Whether to return a single value., ","desc":"Retrieve user meta field for a user."},"update_user_meta":{"params":"int $user_id Post ID., string $meta_key Metadata key., mixed $meta_value Metadata value., mixed $prev_value Optional. Previous value to check before removing., ","desc":"Update user meta field based on user ID."},"count_users":{"params":"string $strategy &#039;time&#039; or &#039;memory&#039;, ","desc":"Count number of users who have each of the user roles."},"setup_userdata":{"params":"int $for_user_id Optional. User ID to set up global data., ","desc":"Set up global user vars."},"wp_dropdown_users":{"params":"string|array $args Optional. Override defaults., ","desc":"Create dropdown HTML content of users."},"sanitize_user_field":{"params":"string $field The user Object field name., mixed $value The user Object value., int $user_id user ID., string $context How to sanitize user fields. Looks for &#039;raw&#039;, &#039;edit&#039;, &#039;db&#039;, &#039;display&#039;, &#039;attribute&#039; and &#039;js&#039;., ","desc":"Sanitize user field based on context."},"update_user_caches":{"params":"object $user User object to be cached, ","desc":"Update all user caches"},"clean_user_cache":{"params":"int $id User ID, ","desc":"Clean all user caches"},"username_exists":{"params":"string $username Username., ","desc":"Checks whether the given username exists."},"email_exists":{"params":"string $email Email., ","desc":"Checks whether the given email exists."},"validate_username":{"params":"string $username Username., ","desc":"Checks whether an username is valid."},"wp_insert_user":{"params":"array $userdata An array of user data., ","desc":"Insert an user into the database."},"wp_update_user":{"params":"array $userdata An array of user data., ","desc":"Update an user in the database."},"wp_create_user":{"params":"string $username The user&#039;s username., string $password The user&#039;s password., string $email The user&#039;s email (optional)., ","desc":"A simpler way of inserting an user into the database."},"_get_additional_user_keys":{"params":"object $user WP_User instance, ","desc":"Return a list of meta keys that wp_insert_user() is supposed to set."},"_wp_get_user_contactmethods":{"params":"object $user User data object (optional), ","desc":"Set up the default contact methods"},"get_category_link":{"params":"int|object $category Category ID or object., ","desc":"Retrieve category link URL."},"get_category_parents":{"params":"int $id Category ID., bool $link Optional, default is false. Whether to format with link., string $separator Optional, default is &#039;/&#039;. How to separate categories., bool $nicename Optional, default is false. Whether to use nice name for display., array $visited Optional. Already linked to categories to prevent duplicates., ","desc":"Retrieve category parents with separator."},"get_the_category":{"params":"int $id Optional, default to current post ID. The post ID., ","desc":"Retrieve post categories."},"_usort_terms_by_name":{"params":"object $a , object $b , ","desc":"Sort categories by name."},"_usort_terms_by_ID":{"params":"object $a , object $b , ","desc":"Sort categories by ID."},"get_the_category_by_ID":{"params":"int $cat_ID Category ID., ","desc":"Retrieve category name based on category ID."},"get_the_category_list":{"params":"string $separator Optional, default is empty string. Separator for between the categories., string $parents Optional. How to display the parents., int $post_id Optional. Post ID to retrieve categories., ","desc":"Retrieve category list in either HTML list or custom format."},"in_category":{"params":"int|string|array $category Category ID, name or slug, or array of said., int|object $_post Optional. Post to check instead of the current post. (since 2.7.0), ","desc":"Check if the current post in within any of the given categories."},"the_category":{"params":"string $separator Optional, default is empty string. Separator for between the categories., string $parents Optional. How to display the parents., int $post_id Optional. Post ID to retrieve categories., ","desc":"Display the category list for the post."},"category_description":{"params":"int $category Optional. Category ID. Will use global category ID by default., ","desc":"Retrieve category description."},"wp_dropdown_categories":{"params":"string|array $args Optional. Override default arguments., ","desc":"Display or retrieve the HTML dropdown list of categories."},"wp_list_categories":{"params":"string|array $args Optional. Override default arguments., ","desc":"Display or retrieve the HTML list of categories."},"wp_tag_cloud":{"params":"array|string $args Optional. Override default arguments., ","desc":"Display tag cloud."},"default_topic_count_text":{"params":"integer $count number of posts with that tag, ","desc":"Default text for tooltip for tag links"},"default_topic_count_scale":{"params":"integer $count number of posts with that tag, ","desc":"Default topic count scaling for tag links"},"wp_generate_tag_cloud":{"params":"array $tags List of tags., string|array $args Optional, override default arguments., ","desc":"Generates a tag cloud (heatmap) from provided data."},"_wp_object_name_sort_cb":{"params":"","desc":"Callback for comparing objects based on name"},"_wp_object_count_sort_cb":{"params":"","desc":"Callback for comparing objects based on count"},"walk_category_tree":{"params":"","desc":"Retrieve HTML list content for category list."},"walk_category_dropdown_tree":{"params":"","desc":"Retrieve HTML dropdown (select) content for category list."},"get_tag_link":{"params":"int|object $tag Tag ID or object., ","desc":"Retrieve the link to the tag."},"get_the_tags":{"params":"int $id Post ID., ","desc":"Retrieve the tags for a post."},"get_the_tag_list":{"params":"string $before Optional. Before tags., string $sep Optional. Between tags., string $after Optional. After tags., ","desc":"Retrieve the tags for a post formatted as a string."},"the_tags":{"params":"string $before Optional. Before list., string $sep Optional. Separate items using this., string $after Optional. After list., ","desc":"Retrieve the tags for a post."},"tag_description":{"params":"int $tag Optional. Tag ID. Will use global tag ID by default., ","desc":"Retrieve tag description."},"term_description":{"params":"int $term Optional. Term ID. Will use global term ID by default., ","desc":"Retrieve term description."},"get_the_terms":{"params":"int $id Post ID. Is not optional., string $taxonomy Taxonomy name., ","desc":"Retrieve the terms of the taxonomy that are attached to the post."},"get_the_term_list":{"params":"int $id Post ID., string $taxonomy Taxonomy name., string $before Optional. Before list., string $sep Optional. Separate items using this., string $after Optional. After list., ","desc":"Retrieve a post&#039;s terms as a list with specified format."},"the_terms":{"params":"int $id Post ID., string $taxonomy Taxonomy name., string $before Optional. Before list., string $sep Optional. Separate items using this., string $after Optional. After list., ","desc":"Display the terms in a list."},"has_category":{"params":"string|int|array $tag Optional. The category name/term_id/slug or array of them to check for., int|object $post Optional. Post to check instead of the current post., ","desc":"Check if the current post has any of given category."},"has_tag":{"params":"string|int|array $tag Optional. The tag name/term_id/slug or array of them to check for., int|object $post Optional. Post to check instead of the current post. (since 2.7.0), ","desc":"Check if the current post has any of given tags."},"has_term":{"params":"string|int|array $term Optional. The term name/term_id/slug or array of them to check for., string $taxonomy Taxonomy name, int|object $post Optional. Post to check instead of the current post., ","desc":"Check if the current post has any of given terms."}}' );